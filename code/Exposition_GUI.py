# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import datetime
import os
import sys
import pandas as pd
import numpy as np
import traceback

# import screeninfo
import re
MACHINE = 'POWER'
ROOT_path = os.path.dirname(os.path.abspath(__file__))



data_path = os.path.join(ROOT_path, 'Data')
models_path = os.path.join(ROOT_path, 'Models')
utils_path = os.path.join(ROOT_path, 'Utils')
transc_path = os.path.join(ROOT_path, 'transcription')
results_path = os.path.join(ROOT_path, 'Results')

sys.path.append(utils_path)
sys.path.append(data_path)
sys.path.append(transc_path)
sys.path.append(models_path)


import functools
import re
# import splice_utils as splu
# import xpresso_utils as xp
# import translation as trns
# import annotations
# from configuration import (MutationConfigType, InsertionConfig, DeletionConfig, SubstitutionConfig, MutationConfig,
#                            InitiationConfig, AdjacentGenesConfig, ExpositionConfig, load_configs_from_file, save_configs_to_file)
from PyQt5 import QtCore, QtGui, QtWidgets
from pyfaidx import Fasta
from Models.CRISPRedict.Scripts.predict import predict_sequence
from Models.lindel.Lindel_prediction import pred_lindel
from EXPosition_utils import read_from_chr, reverse_complement
import pickle

# from transcription.get_transcription_pred import pred_transcription_for_mut_gene
if 1:
    from Models.Oncosplice.models.oncosplice_utils import *
    from Models.Oncosplice.models.titer_utils import build_titer_model
    titer_model = build_titer_model()
    from transcription.get_transcription_pred import pred_transcription_for_mut_gene
# global analysis_running
#analysis_running=0

# mg, so = run_oncosplice_interactive_shai(['GGA2:16:23486743:AGCCTGAA:-'])

# user32 = ctypes.windll.user32
# screensize = user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)

# QtWidgets.QApplication.setAttribute(QtCore.Qt.QT_ENABLE_HIGHDPI_SCALING, True) #enable highdpi scaling
# QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps, True) #use highdpi icons

genes_df = pd.read_csv(os.path.join(data_path, 'all_genome_genes.csv'))
GENE_SYMBOLS = genes_df['gene'].values
transcripts_df = pd.read_csv(os.path.join(data_path, 'all_genome_transcripts.csv'))
ENSMBL_IDS = transcripts_df['ID'].values
ENSMBL_ID_PREFIX = "ENST"


import pickle
import joblib
VBC_scores = pd.read_pickle(os.path.join(models_path, 'EXPosition_Classifier', 'agg_VBC_human_scores.pkl'))
GuidePro_scores = pd.read_pickle(os.path.join(models_path, 'EXPosition_Classifier', 'agg_GuidePro_human_scores.pkl'))
EXP_VBC_GP_svm_model = joblib.load(os.path.join(models_path, 'EXPosition_Classifier', 'EXP_VBC_GP_svm_model.pkl'))
#features are: 'eff', 'GuidePro','VBC','splicing_score', 'transcription_score', 'trans_init_score'
EXP_GP_svm_model = joblib.load(os.path.join(models_path, 'EXPosition_Classifier', 'EXP_GP_svm_model.pkl'))
#features are: 'eff', 'GuidePro','splicing_score', 'transcription_score', 'trans_init_score'
EXP_VBC_svm_model = joblib.load(os.path.join(models_path, 'EXPosition_Classifier', 'EXP_VBC_svm_model.pkl'))
#features are: 'eff', 'VBC','splicing_score', 'transcription_score', 'trans_init_score'
EXP_svm_model = joblib.load(os.path.join(models_path, 'EXPosition_Classifier', 'EXP_svm_model.pkl'))
#features are: 'eff','splicing_score', 'transcription_score', 'trans_init_score'
DEFAULT_MESSAGE_TIME_MSECS = 5000
fasta_name = 'hg38.fa'
chrs = Fasta(os.path.join(data_path,'Chromosome',fasta_name))
up_len = 13
down_len = 29
# lindel_top = 4

class AnalysisWorker(QtCore.QObject):
    finished = QtCore.pyqtSignal()
    output_text = QtCore.pyqtSignal(str)
    mut_params_update = QtCore.pyqtSignal(dict)

    def _show_message(self, s:str, run_on_GUI=0):
        if run_on_GUI:
            self.output_text.emit(s)
        else:
            print(s)

    def predict_crispredict_lindel(self,exp_mut_dict):
        chr_name = exp_mut_dict['site_chr']
        start_coord = exp_mut_dict['site_start_pos']
        seq = exp_mut_dict['target_seq']
        strand = exp_mut_dict['site_strand']
        cut_site = exp_mut_dict['cut_site_pos']

        ##probably not needed since te next block does this already
        # #alt extraction for crisprerdict:
        # if strand == '+':
        #     start = start_coord-4
        #     end = start_coord+26
        # else:
        #     start = start_coord-25
        #     end = start_coord+5
        # seq_30,_ = read_from_chr(chr_name, strand, start, end)  # should be exp_mut_dict['site_str']

        # #alt extraction for lindel and CRISPRedict:
        # if strand == '+':
        #     alt_lind_start = exp_mut_dict['cut_site_pos']-29
        #     alt_lind_end= exp_mut_dict['cut_site_pos']+31
        # else:
        #     alt_lind_start = exp_mut_dict['cut_site_pos']-30
        #     alt_lind_end= exp_mut_dict['cut_site_pos']+30
        #
        # seq_60,_ = read_from_chr(chr_name, strand, alt_lind_start, alt_lind_end)  # should be exp_mut_dict['site_str']
        # seq_30 = seq_60[9:39]
        #  exp_mut_dict['eff'] = predict_sequence(seq_30, promoter='u6',
        #                                                  path=os.path.join(models_path, 'CRISPRedict','Saved models','CRISPRedict'))
        # frequency, indels = pred_lindel(seq_60, models_path)



        if strand == '+':
            up_start = start_coord - up_len
            down_start = start_coord + len(seq) + 1
        else:
            # start_coord =45178228
            # down_start = start_coord - down_len
            # up_start = start_coord + len(seq) + 1
            up_start = start_coord + 5
            down_start = start_coord - 48

        up_end = up_start + up_len
        down_end = down_start + down_len

        up_seq,_ = read_from_chr(chr_name,strand,up_start,up_end) # should be exp_mut_dict['site_str']
        down_seq,_ = read_from_chr(chr_name,strand,down_start,down_end) # should be exp_mut_dict['site_str']
        # Using CRISPRedict for gRNA efficiency
        #(we always take pos strand)
        exp_mut_dict['eff'] = predict_sequence(up_seq[-4:] + seq + down_seq[:3], promoter='u6',
                                                 path=os.path.join(models_path, 'CRISPRedict','Saved models','CRISPRedict'))

        # Using Lindel to predict NHEJ outcomes
        #(we always take pos strand)
        frequency, indels = pred_lindel(up_seq + seq + down_seq, models_path)
        frequency = [float(f) for f in frequency]
        mut_df = pd.DataFrame.from_dict({"indels": indels, "frequency": frequency})
        mut_df = mut_df.loc[mut_df["indels"].str.contains("X") == False, :]
        mut_df = mut_df.iloc[1:int(exp_mut_dict['N_muts']) + 1, ]

        # Normalizing probabilities to sum of 1
        mut_df["frequency"] = mut_df["frequency"] / sum(mut_df["frequency"])
        mut_df["mut_type"] = mut_df["indels"].str[0]
        mut_df["del_len"] = -1
        mut_df["del_start"] = -1
        for mut_ind in mut_df.index:
            mut_str = mut_df.loc[mut_ind, "indels"]
            if mut_df.loc[mut_ind, "mut_type"] == "I":
                pred_nt = mut_str.split("+")[1]
                if strand == "-": #note that when comparing to version in CRISPRIL - we always take the pos strand in INS
                    pred_nt = reverse_complement(pred_nt)
                mut_df.loc[mut_ind, "ins_nt"] = pred_nt
            elif mut_df.loc[mut_ind, "mut_type"] == "D":
                mut_df.loc[mut_ind, "del_len"], del_start = [int(x) for x in re.findall("-?\d+", mut_str)]
                if strand == "+": #mdel_start
                    mut_df.loc[mut_ind, "del_start"] = cut_site + 1 + del_start # cut site is 17th pos - but here they want 18th pos
                    # mut_df.loc[mut_ind, "del_start"] = start_coord + 17 + del_start
                elif strand == "-":
                    # mut_df.loc[mut_ind, "del_start"] = start_coord + (2 - del_start)
                    mut_df.loc[mut_ind, "del_start"] = cut_site - del_start - mut_df.loc[mut_ind, "del_len"]
                else:
                    raise Exception('strand should be either "+" or "-"')
            else:
                raise Exception("Mutation not insertion or deletion")

        print(mut_df)
        print(exp_mut_dict['eff'])

        exp_mut_dict['mut'] = mut_df.copy()
        return exp_mut_dict

    def parse_man_muts(self,exp_mut_dict):
        '''
        transform all strings into floats and ints, but only if the probability is greater than 0
        '''
        exp_mut_dict['INS_prob'] = np.array([float(x) for x in exp_mut_dict['INS_prob'].split('/')])
        if np.any(exp_mut_dict['INS_prob'])>0:
            exp_mut_dict['INS_ins_mut'] = exp_mut_dict['INS_ins_mut'].split('/')
            exp_mut_dict['INS_ins_pos'] = int(exp_mut_dict['INS_ins_pos'])
            exp_mut_dict['INS_ins_pos'] = [exp_mut_dict['INS_ins_pos']]*len(exp_mut_dict['INS_prob'])
            if not (len(exp_mut_dict['INS_ins_mut'])==len(exp_mut_dict['INS_prob'])):#some input for DEL muts is missing
                exp_mut_dict['Error'] = 'Number of inputs for INS isn''t consistent - Need num(INS_prob)=num(INS_ins_muts)'
                return exp_mut_dict

        exp_mut_dict['DEL_prob'] = np.array([float(x) for x in exp_mut_dict['DEL_prob'].split('/')])
        if np.any(exp_mut_dict['DEL_prob']) > 0:
            exp_mut_dict['DEL_del_start'] = [int(x) for x in exp_mut_dict['DEL_del_start'].split('/')]
            exp_mut_dict['DEL_del_nts'] = exp_mut_dict['DEL_del_nts'].split('/')
            if not (len(exp_mut_dict['DEL_del_start'])==len(exp_mut_dict['DEL_prob'])==len(exp_mut_dict['DEL_del_nts'])):#some input for DEL muts is missing
                exp_mut_dict['Error'] = 'Number of inputs for DEL isn''t consistent - Need num(DEL_prob)=num(DEL_del_start)==num(DEL_del_nts)'
                return exp_mut_dict

        exp_mut_dict['SUB_prob'] = np.array([float(x) for x in exp_mut_dict['SUB_prob'].split('/')])
        if np.any(exp_mut_dict['SUB_prob']) > 0:
            exp_mut_dict['SUB_ins_mut'] = exp_mut_dict['SUB_ins_mut'].split('/')
            exp_mut_dict['SUB_del_start'] = [int(x) for x in exp_mut_dict['SUB_del_start'].split('/')]
            exp_mut_dict['SUB_del_nts'] = exp_mut_dict['SUB_del_nts'].split('/')
            if not (len(exp_mut_dict['SUB_ins_mut'])==len(exp_mut_dict['SUB_del_start'])
                      ==len(exp_mut_dict['SUB_prob'])==len(exp_mut_dict['SUB_del_nts'])):#some input for DEL muts is missing
                exp_mut_dict['Error'] = 'Number of inputs for SUB isn''t consistent - Need num(SUB_prob)=num(SUB_del_start)==num(SUB_del_nts)'
                return exp_mut_dict

        #check probabilities add to 1:
        if not sum(np.concatenate((exp_mut_dict['INS_prob'],exp_mut_dict['DEL_prob'],exp_mut_dict['SUB_prob'])))==1:
            exp_mut_dict['Error'] = 'Probabilites don\'t add up to 1'
            return exp_mut_dict

        exp_mut_dict['mut'] = pd.DataFrame({})
        exp_mut_dict['eff'] = sum(exp_mut_dict['INS_prob'])+sum(exp_mut_dict['DEL_prob'])+sum(exp_mut_dict['SUB_prob'])
        exp_mut_dict['DEL_names'] = ['D']*len( exp_mut_dict['DEL_prob'])
        exp_mut_dict['INS_names'] = ['I']*len( exp_mut_dict['INS_prob'])
        exp_mut_dict['SUB_names'] = ['S']*len( exp_mut_dict['SUB_prob'])

        # mut_types = ['I']*len(exp_mut_dict['INS_prob'])
        # mut_types.extend(['D']*len(exp_mut_dict['DEL_prob']))
        # mut_types.extend(['S']*len(exp_mut_dict['SUB_prob']))
        # probs = exp_mut_dict['INS_prob'].extend(exp_mut_dict['DEL_prob']).extend(exp_mut_dict['SUB_prob'])
        # del_lens = [-1]*len(exp_mut_dict['INS_prob'])
        # del_lens = del_lens.extendexp_mut_dict['INS_prob'])
        # del_lens = [-1] * len(exp_mut_dict['INS_prob'])
        # probs.extend(['S']*len(exp_mut_dict['SUB_prob']))
        # exp_mut_dict['mut'] = pd.Dataframe({'Mut. Type': mut_types,
        #                                     'Probability': ,
        #                                     'Del. Length': '',
        #                                     'Del. Start': '',
        #                                     'Inserted Nts (+)': '',
        #                                     })
        return exp_mut_dict

    @staticmethod
    def min_dist(row):
        if abs(row['dist_start']) > abs(row['dist_stop']):
            val = 'Stop_' + str(row['dist_start'])
        else:
            val = 'Start_' + str(row['dist_stop'])
        return val

    def update_curr_adj_within_genes(self,curr_adj_within_genes,adj_within_genes,i,curr_mut_pos,mut_type):
        if curr_adj_within_genes.shape[0] > 0:
            curr_adj_within_genes['mut'] = mut_type + '_' + str(i)
            curr_adj_within_genes['dist_start'] = curr_adj_within_genes['Start'].astype(int) - curr_mut_pos
            curr_adj_within_genes['dist_stop'] = curr_adj_within_genes['Stop'].astype(int) - curr_mut_pos
            curr_adj_within_genes['min_dist'] = curr_adj_within_genes.apply(self.min_dist, axis=1)
            new_adj_idxs = []
            for j in curr_adj_within_genes.index:
                if j in adj_within_genes.index:
                    mut_type_i = mut_type + '_' + str(i)
                    if mut_type_i not in adj_within_genes.loc[j, 'mut']:
                        adj_within_genes.loc[j, 'mut'] = adj_within_genes.loc[j, 'mut'] + ',' + mut_type + '_' + str(i)
                    curr_min_dist = adj_within_genes.loc[j, 'min_dist'] + ',' + curr_adj_within_genes.loc[j, 'min_dist']
                    min_dist_i = [abs(int(x)) for x in re.findall('[-]?\d+', curr_min_dist)]
                    min_dist_i = min_dist_i.index(min(min_dist_i))
                    adj_within_genes.loc[j, 'min_dist'] = curr_min_dist.split(',')[min_dist_i]
                else:
                    new_adj_idxs.append(j)
            adj_within_genes = pd.concat([adj_within_genes, curr_adj_within_genes.loc[new_adj_idxs]])
        return adj_within_genes

    def get_adj_info(self,exp_mut_dict):
        chr_table_name = 'chr_table_' + exp_mut_dict['site_chr'] + '.csv'
        chr_table = pd.read_csv(os.path.join('.','annotations',chr_table_name))
        adj_genes = pd.DataFrame({})
        within_genes = pd.DataFrame({})
        for mut_type in ['INS','DEL','SUB']:
            if exp_mut_dict[mut_type + '_prob'][0]==0:
                continue
            if mut_type == 'INS':
                mut_start_pos = exp_mut_dict['INS_ins_pos']
                mut_end_pos = []
            else:
                mut_start_pos = exp_mut_dict[mut_type + '_del_start']
                mut_end_pos = [x+len(y)-1 for x,y in zip(mut_start_pos,exp_mut_dict[mut_type +'_del_nts'])]
            for i in range(len(exp_mut_dict[mut_type + '_prob'])):
                curr_mut_positions = [mut_start_pos[i]]
                if mut_type!='INS':
                    curr_mut_positions.append(mut_end_pos[i])
                for curr_mut_pos in curr_mut_positions:
                    curr_adj_genes = chr_table[
                        (abs(chr_table['Start'] - curr_mut_pos) <= int(exp_mut_dict['adjacent_srch_dist'])) |
                        (abs(chr_table['Stop'] - curr_mut_pos) <= int(exp_mut_dict['adjacent_srch_dist']))].copy()
                    curr_within_genes = chr_table[
                        ((curr_mut_pos >= chr_table['Start']) & (chr_table['Strand']=='+')
                         & (chr_table['Stop'] >= curr_mut_pos) )].copy()
                    # # curr_adj_genes = curr_adj_genes[(curr_adj_genes['Feature']!='exon') & (curr_adj_genes['Feature']!='CDS')]
                    adj_genes = self.update_curr_adj_within_genes(curr_adj_genes, adj_genes, i, curr_mut_pos,mut_type)
                    within_genes = self.update_curr_adj_within_genes(curr_within_genes, within_genes, i, curr_mut_pos,mut_type)
        return within_genes, adj_genes

    def find_interest_genes(self,exp_mut_dict,transcripts_mod_df):
        #get interest genes for _xpresso and then for SpliceAI+TITER and combine the results.
        if exp_mut_dict['do_transcription']=='1':
            #_Xpresso transcripts
            xp_INS_affected_transcripts = self.find_affected_transcripts_model_mut(exp_mut_dict, 'XP','INS', transcripts_mod_df)
            xp_DEL_affected_transcripts = self.find_affected_transcripts_model_mut(exp_mut_dict, 'XP','DEL', transcripts_mod_df)
            xp_SUB_affected_transcripts = self.find_affected_transcripts_model_mut(exp_mut_dict, 'XP','SUB', transcripts_mod_df)
            xp_affected_transcripts = pd.concat([xp_INS_affected_transcripts,xp_DEL_affected_transcripts,xp_SUB_affected_transcripts])
        else:
            xp_affected_transcripts=pd.DataFrame()

        if exp_mut_dict['do_splicing']=='1' or exp_mut_dict['do_initiation']=='1':
            #SAI+TITER genes
            sai_INS_affected_transcripts = self.find_affected_transcripts_model_mut(exp_mut_dict, 'ST', 'INS', transcripts_mod_df)
            sai_DEL_affected_transcripts = self.find_affected_transcripts_model_mut(exp_mut_dict, 'ST', 'DEL', transcripts_mod_df)
            sai_SUB_affected_transcripts = self.find_affected_transcripts_model_mut(exp_mut_dict, 'ST', 'SUB', transcripts_mod_df)
            sai_affected_transcripts = pd.concat([sai_INS_affected_transcripts,sai_DEL_affected_transcripts,sai_SUB_affected_transcripts])
        else:
            sai_affected_transcripts = pd.DataFrame()

        #have only one occurrence of each gene (even if it was affected by more than one model)
        affected_transcripts = pd.concat([xp_affected_transcripts,sai_affected_transcripts],ignore_index=True)
        for unq_gene in pd.unique(affected_transcripts.gene):
            curr_gene_df_idxs = affected_transcripts[affected_transcripts['gene']==unq_gene].index
            if len(curr_gene_df_idxs)>1:
                affected_transcripts.loc[curr_gene_df_idxs, 'model_mut'] = ','.join(affected_transcripts.loc[curr_gene_df_idxs, 'model_mut'].unique())
                affected_transcripts = affected_transcripts.drop(curr_gene_df_idxs[1:])



        #get genes_df corresponding to all affected transcripts
        mod_genes_df = genes_df.merge(affected_transcripts[['gene', 'model_mut']], on='gene', how='left')
        affected_genes = mod_genes_df[mod_genes_df['gene'].isin(affected_transcripts['gene'])]
        return affected_genes

    def find_affected_transcripts_model_mut(self, exp_mut_dict, model_name, mut_type, transcripts_mod_df):
        '''
         genes "end" coord for neg strand genes are their start.
         this function assumes all positions are one based
         '''
        chr_num = 'chr' + exp_mut_dict['site_chr']
        probability = exp_mut_dict[mut_type + '_prob']
        affected_genes = pd.DataFrame()
        for i in range(len(probability)):
            curr_prob = probability[i]
            if curr_prob > 0:
                if model_name == 'XP':
                    upstream_margin = 7000  # from TSS
                    downstream_margin = 3499  # from TSS
                    # upstream_margin = 7000 + 500 # from TSS
                    # downstream_margin = 3499 + 800 # from TSS
                    if mut_type == 'DEL' or mut_type == 'SUB':
                        # print(exp_mut_dict['DEL_names'][i])
                        mut_range = [exp_mut_dict[mut_type + '_del_start'][i],
                                     exp_mut_dict[mut_type + '_del_start'][i] + len(
                                         exp_mut_dict[mut_type + '_del_nts'][i]) - 1]
                        neg_upstream_margin = upstream_margin
                        pos_downstream_margin = downstream_margin
                        pos_gene_start_pos = mut_range[0]
                        pos_gene_end_pos = mut_range[1]
                        neg_gene_start_pos = mut_range[0]
                        neg_gene_end_pos = mut_range[1]
                    elif mut_type == 'INS':
                        # print(exp_mut_dict['INS_names'][i])
                        neg_upstream_margin = upstream_margin - 1
                        pos_downstream_margin = downstream_margin - 1
                        pos_gene_start_pos = exp_mut_dict['INS_ins_pos'][i]
                        pos_gene_end_pos = exp_mut_dict['INS_ins_pos'][i]
                        neg_gene_start_pos = exp_mut_dict['INS_ins_pos'][i]
                        neg_gene_end_pos = exp_mut_dict['INS_ins_pos'][i]
                    pos_affected_genes = transcripts_mod_df[
                        (transcripts_mod_df['chrm'] == chr_num) & (transcripts_mod_df['strand'] == '+')
                        & (
                                ((transcripts_mod_df[
                                      'start'] - pos_gene_end_pos <= upstream_margin) & (
                                         pos_gene_end_pos <= transcripts_mod_df['start']))
                                | ((pos_gene_start_pos - transcripts_mod_df[
                            'start'] <= pos_downstream_margin) & (
                                           transcripts_mod_df['start'] <= pos_gene_start_pos))
                        )]
                    neg_affected_genes = transcripts_mod_df[
                        (transcripts_mod_df['chrm'] == chr_num) & (transcripts_mod_df['strand'] == '-')
                        & (
                                ((transcripts_mod_df[
                                      'end'] - neg_gene_end_pos <= downstream_margin) & (
                                         neg_gene_end_pos <= transcripts_mod_df['end']))
                                | ((neg_gene_start_pos - transcripts_mod_df[
                            'end'] <= neg_upstream_margin) & (
                                           transcripts_mod_df['end'] <= neg_gene_start_pos))
                        )]
                    curr_affected_genes = pd.concat([pos_affected_genes, neg_affected_genes])
                elif model_name == 'ST':
                    upstream_margin = 0
                    downstream_margin = 0
                    if mut_type == 'INS':
                        # print(exp_mut_dict['INS_names'][i])
                        start_pos = exp_mut_dict['INS_ins_pos'][i]
                        end_pos = exp_mut_dict['INS_ins_pos'][i]
                        downstream_margin += 1
                    else:
                        # print(exp_mut_dict['DEL_names'][i])
                        start_pos = exp_mut_dict[mut_type + '_del_start'][i]
                        end_pos = start_pos + len(exp_mut_dict[mut_type + '_del_nts'][i]) - 1
                    curr_affected_genes = transcripts_mod_df[(transcripts_mod_df['chrm'] == chr_num) &
                                                       (((start_pos - transcripts_mod_df['start'] >= upstream_margin) &
                                                         (transcripts_mod_df['end'] - start_pos >= downstream_margin)) |
                                                        ((end_pos - transcripts_mod_df['start'] >= upstream_margin) &
                                                         (transcripts_mod_df['end'] - end_pos >= downstream_margin))
                                                        )].copy(deep=True)
            else:
                curr_affected_genes = pd.DataFrame()
            curr_affected_genes['model_mut'] = model_name + '_' + mut_type + '_' + str(i)
            # print(curr_affected_genes)
            affected_genes = pd.concat([affected_genes, curr_affected_genes])
        return affected_genes

    # def get_clinvar_rankings(self,clinvar_sites,mut_dict_scores,score_name,exp_mut_dict):
    #     clinvar_mean_score = 0
    #     clinvar_max_score = 0
    #     max_clinvar_mut_name = 'All Muts'
    #     # total_S_muts = len([x for x in exp_mut_dict['SUB_prob'] if x>0])
    #     # total_D_muts = len([x for x in exp_mut_dict['DEL_prob'] if x>0])
    #     # total_I_muts = len([x for x in exp_mut_dict['INS_prob'] if x>0])
    #     # total_num_of_muts = total_S_muts+total_D_muts+total_I_muts
    #     # num_non_affecting_muts = total_num_of_muts-len(mut_dict_scores.keys())
    #     # for i in range(num_non_affecting_muts):
    #     #     mut_dict_scores[f'non_affect_mut_{i}'] = 0
    #     for mut_name in mut_dict_scores:
    #         cv_temp_thresh_sites = clinvar_sites[
    #             clinvar_sites[score_name] >= mut_dict_scores[mut_name]]
    #         curr_clinvar_score = cv_temp_thresh_sites[cv_temp_thresh_sites['Class'] == 'P'].shape[0] / cv_temp_thresh_sites.shape[0]
    #         clinvar_mean_score += curr_clinvar_score * exp_mut_dict[mut_name[3:6]+'_prob'][int(mut_name[7:])]
    #                               # (1 / len(mut_dict_scores.keys()))
    #         if curr_clinvar_score > clinvar_max_score:
    #             clinvar_max_score = curr_clinvar_score
    #             max_clinvar_mut_name = mut_name
    #
    #     no_effect_prob = 1-exp_mut_dict['eff']
    #     raw_mut_dict_names = [x[3:] for x in list(mut_dict_scores.keys())]
    #     mut_types = ['DEL','INS','SUB']
    #     for mut_t in mut_types:
    #         for i in range(len(exp_mut_dict[f'{mut_t}_prob'])):
    #             if exp_mut_dict[f'{mut_t}_prob'][i]>0 and not f'{mut_t}_{i}' in raw_mut_dict_names:
    #                 no_effect_prob += exp_mut_dict[f'{mut_t}_prob'][i]
    #
    #     clinvar_mean_score += 0.1516 * no_effect_prob
    #     return clinvar_mean_score, f'{max_clinvar_mut_name}: {clinvar_max_score:.2f}, Prob={exp_mut_dict[mut_name[3:6]+"_prob"][int(mut_name[7:])]:.2f}'

    def transform_predictor_results(self, exp_mut_dict, mut_prediction):
        '''

            IMPORTANT!!! mutations and positions outputted from here are always relative to pos strand and in 1-base.
            if a deletion happens on neg strand - the del_start position is the start of it in the pos strand.
            an insertion on a neg strand will be reveresed complemented.
            The only thing realtive to its strand is the site sequence.
            regarding splu.pull_fasta_seq: start_loc is the input pos, left margin afterwards, then right margin, then bool of rev
            Let x := start_loc-1, DNA denote the (positive-strand) Fasta sequence, and assume 0-base
            indexing (i.e. DNA[0] is the first NT in the Fasta sequence). Then:
            1. In case of rev=False: the extracted sequence is DNA[x-left_margin:x+right_margin]
            2. In case of rev=True: the extracted sequence is reverse_complement( DNA[x-right_margin:x+left_margin] )
        '''
        exp_mut_dict['INS_prob'] = np.array([0.0])
        # exp_mut_dict['INS_ins_pos'] = [-1]
        exp_mut_dict['INS_ins_mut'] = ['']
        exp_mut_dict['INS_names'] = ['']
        exp_mut_dict['DEL_prob'] = np.array([0.0])
        exp_mut_dict['DEL_del_start'] = [-1]
        exp_mut_dict['DEL_del_nts'] = ['']
        exp_mut_dict['DEL_names'] = ['']
        exp_mut_dict['SUB_prob'] = np.array([0.0])
        exp_mut_dict['SUB_ins_mut'] = ['']
        exp_mut_dict['SUB_del_start'] = [-1]
        exp_mut_dict['SUB_del_nts'] = ['']


        chrm_path = os.path.join(data_path, 'Chromosome',
                     'Homo_sapiens.GRCh38.dna_sm.chromosome.' + exp_mut_dict['site_chr'] + '.fa')
        if mut_prediction['mut_predictor_name']=='SPROUT':
            exp_mut_dict['INS_prob'] = np.array([mut_prediction['insert_chance']])
            exp_mut_dict['DEL_prob'] = np.array([mut_prediction['del_chance']])
            if exp_mut_dict['site_strand']=='+':
                exp_mut_dict['DEL_del_start'] = [exp_mut_dict['cut_site_pos'] - mut_prediction['del_length']//2 + 1]
                #TODO read_from_chr returns indices as well - need only seq here
                del_nts,_ = read_from_chr(exp_mut_dict['site_chr'],
                                    exp_mut_dict['site_strand'],
                                    exp_mut_dict['DEL_del_start'][0],
                                    exp_mut_dict['DEL_del_start'][0]+mut_prediction['del_length'])
                exp_mut_dict['DEL_del_nts'] = [del_nts]
                # exp_mut_dict['DEL_del_nts'] = [splu.pull_fasta_seq(chrm_path, exp_mut_dict['DEL_del_start'][0], 0, mut_prediction['del_length']-1,
                #                                       False if exp_mut_dict['site_strand'] == '+' else True)]
                exp_mut_dict['INS_ins_mut'] = [mut_prediction['pred_nt']]
                exp_mut_dict['INS_ins_pos'] = [exp_mut_dict['cut_site_pos']]
            else:
                exp_mut_dict['DEL_del_start'] = [exp_mut_dict['cut_site_pos'] - mut_prediction['del_length'] // 2]
                del_nts,_ = read_from_chr(exp_mut_dict['site_chr'],'+',
                                     exp_mut_dict['DEL_del_start'][0], exp_mut_dict['DEL_del_start'][0]+mut_prediction['del_length'])
                exp_mut_dict['DEL_del_nts'] = [del_nts]
                exp_mut_dict['INS_ins_mut'] = [reverse_complement(mut_prediction['pred_nt'])]
                exp_mut_dict['INS_ins_pos'] = [exp_mut_dict['cut_site_pos']-1]

                # neg_DEL_del_nts = splu.pull_fasta_seq(chrm_path, neg_DEL_del_start, 0, mut_prediction['del_length'] - 1,
                #                                   False if exp_mut_dict['site_strand'] == '+' else True)
                # neg_INS_ins_mut = mut_prediction['pred_nt']
                # chrs['chr12'][neg_DEL_del_start:neg_DEL_del_start + 10]
                # GCAGACAGTTACTCACA GAG
                #             TCACA GAGCG
                # exp_mut_dict['DEL_del_nts'] = [reverse_complement(neg_DEL_del_nts)]
                # exp_mut_dict['DEL_del_start'] = [neg_DEL_del_start - len(exp_mut_dict['DEL_del_nts']) + 1]


                # chrs['chr12'][pos_DEL_del_start:pos_DEL_del_start + 10]
        elif mut_prediction['mut_predictor_name']=='Lindel':
            mut_df = exp_mut_dict['mut']
            mut_df['del_nts'] = [''] * mut_df.shape[0]
            if 'I' not in mut_df['mut_type'].values:
                mut_df['ins_nt'] = [''] * mut_df.shape[0]
            cut_prob = exp_mut_dict['eff']
            exp_mut_dict['INS_prob'] = cut_prob*mut_df.loc[mut_df['mut_type']=='I','frequency'].values
            exp_mut_dict['INS_ins_mut'] = [x for x in mut_df.loc[mut_df['mut_type']=='I','ins_nt'].values]
            exp_mut_dict['INS_names'] = mut_df.loc[mut_df['mut_type'] == 'I', 'indels'].values
            exp_mut_dict['DEL_prob'] = cut_prob*mut_df.loc[mut_df['mut_type']=='D','frequency'].values
            exp_mut_dict['DEL_del_start'] = [x for x in mut_df.loc[mut_df['mut_type']=='D','del_start'].values]
            exp_mut_dict['DEL_names'] = mut_df.loc[mut_df['mut_type'] == 'D', 'indels'].values
            del_lens = mut_df.loc[mut_df['mut_type']=='D','del_len'].values
            exp_mut_dict['DEL_del_nts'] = ['']*len(del_lens)
            for i in range(len(exp_mut_dict['DEL_del_start'])):
                del_start, del_len = exp_mut_dict['DEL_del_start'][i],del_lens[i]
                del_nts,_ = read_from_chr(exp_mut_dict['site_chr'],'+',
                                    del_start,del_start + del_len)
                exp_mut_dict['DEL_del_nts'][i] = del_nts
                # del_start_zero_base = del_start-1
                # exp_mut_dict['DEL_del_nts'][i] = chrs['chr'+exp_mut_dict['site_chr']][del_start_zero_base:del_start_zero_base+del_len].seq.upper()
            exp_mut_dict['INS_ins_pos'] = [exp_mut_dict['INS_ins_pos']]*len(exp_mut_dict['INS_prob'])
        return exp_mut_dict

    def _update_genomic_feature_in_result_2(self,exp_mut_dict,within_genes, adj_genes, run_on_GUI):
        if within_genes.shape[0] + adj_genes.shape[0] == 0:
            self._show_message(f'No mutation is within {exp_mut_dict["adjacent_srch_dist"]} bps or inside any genomic feature!',run_on_GUI)
            return
        unq_mut_types = within_genes['mut'].unique()
        for unq_mut in unq_mut_types:
            curr_within_genes = within_genes[within_genes['mut']==unq_mut]
            curr_adj_genes = adj_genes[adj_genes['mut'] == unq_mut]
            srch_genes = {'Within':curr_within_genes, f'Adjacent ({exp_mut_dict["adjacent_srch_dist"]}) to':curr_adj_genes}
            for k in srch_genes.keys():
                self._show_message(f"Mutation {unq_mut} is {k} the following genomic features:\n", run_on_GUI)
                curr_genes = srch_genes[k]
                for i in curr_genes.index:
                    curr_info = curr_genes.loc[i, 'Attributes']
                    line = {}
                    feature = curr_genes.loc[i,'Feature']
                    if feature=='region':
                        continue
                    line['Feature'] = feature
                    if 'Name=' in curr_info:
                        curr_name =  re.findall('(?<=Name=).*?(?=[;]|$)',curr_info)[0]
                        line['Name'] = curr_name
                    if 'gene_biotype=' in curr_info:
                        curr_biotype = re.findall('(?<=gene_biotype=).*?(?=[;]|$)',curr_info)[0]
                        line['Biotype'] = curr_biotype
                    if 'product=' in curr_info:
                        curr_product = re.findall('(?<=product=).*?(?=[;]|$)',curr_info)[0]
                        line['Product'] = curr_product
                    if 'description=' in curr_info:
                        curr_descr =  re.findall('(?<=description=).*?(?=[;]|$)',curr_info)[0]
                        line['Description'] = curr_descr
                    if feature=='match':
                        line['ID'] = re.findall('(?<=ID=).*?(?=[;]|$)',curr_info)[0]

                    min_dist = curr_genes.loc[i, 'min_dist'].split('_')
                    if int(min_dist[1])<0:
                        min_dist = ' '.join(['Downstream to', min_dist[0], min_dist[1][1:]])
                    else:
                        min_dist = ' '.join(['Upstream to', min_dist[0], min_dist[1]])
                    line['Distance'] = min_dist
                    output = ', '.join([k + ': ' + line[k] for k in line.keys()])
                    self._show_message('\t'+k+'- '+output+'\n',run_on_GUI)

    def _update_genomic_feature_in_result(self, genomic_feature, sub_entries, upstream, downstream, search_dist):
        if not genomic_feature:
            self.output_text.emit("- Couldn't find a genomic feature at the requested cut location")
            return
        self.output_text.emit(f"- The cut site's containing feature: {genomic_feature.format_attr_string()}")
        for sub_entry in sub_entries:
            self.output_text.emit(sub_entry.format_hierarchy())
        gene_start_loc = genomic_feature.start
        self.output_text.emit(f"- Genes upstream to {genomic_feature.Name} (up to {search_dist} bps away):")
        for gene in upstream:
            self.output_text.emit(f"  - {gene} (distance={abs(gene.start - gene_start_loc)} bps)")
        if not upstream:
            self.output_text.emit("  - not found")
        self.output_text.emit(f"- Genes downstream to {genomic_feature.Name} (up to {search_dist} bps away):")
        for gene in downstream:
            self.output_text.emit(f"  - {gene} (distance={abs(gene.start - gene_start_loc)} bps)")
        if not downstream:
            self.output_text.emit("  - not found")
        self.output_text.emit("")

    @QtCore.pyqtSlot()
    def run(self, input_configs,save_results,run_on_GUI= 1):
        #analysis_running = 1
        if not hasattr(input_configs,'name'):
            df_name = 'Analysis ' + ''.join([x if x!=':' else '_' for x in str(datetime.datetime.now())[:-7]])
        else:
            df_name = input_configs.name
        if not hasattr(input_configs,'use_mut_predictor'):
            input_configs['use_mut_predictor'] = '1'
        if not hasattr(input_configs, 'increased_sensitivity'):
            input_configs['increased_sensitivity'] = '0'
        if not hasattr(input_configs,'N_muts'):
            input_configs['N_muts'] = '4'
        if not hasattr(input_configs,'init_search_dist'):
            input_configs['init_search_dist'] = '10'
        if not hasattr(input_configs,'final_search_dist'):
            input_configs['final_search_dist'] = '400'
        if not hasattr(input_configs,'titer_threshold'):
            input_configs['titer_threshold'] = '0.05'
        # if not hasattr(input_configs,'conservation_available'):
        #     input_configs['conservation_available'] = 1
        if not hasattr(input_configs,'SAI_interesting'):
            input_configs['SAI_interesting'] = '?'
        if not hasattr(input_configs,'TITER_interesting'):
            input_configs['TITER_interesting'] = '?'

        from time import time
        t0=time()
        all_sites_success=True
        if input_configs.shape[0] > 1:
            self._show_message(f'>> Running {input_configs.shape[0]} sites:',run_on_GUI)
        count = 0
        input_configs['splicing_score']='-'
        input_configs['transcription_score']='-'
        input_configs['trans_init_score']='-'
        input_configs['all_int_genes_transcription_score']='-'
        input_configs['all_int_genes_trans_init_score']='-'
        input_configs['all_int_genes_splicing_score']='-'

        if 'mult_gene_affect' not in input_configs.columns:
            input_configs['mult_gene_affect'] = '-'
        if 'mut_df' not in input_configs.columns:
            input_configs['mut_df'] = pd.Series(dtype='object')
        if 'do_transcription' not in input_configs.columns:
            input_configs['do_transcription']='1'
        if 'do_splicing' not in input_configs.columns:
            input_configs['do_splicing']='1'
        if 'do_initiation' not in input_configs.columns:
            input_configs['do_initiation']='1'
        if 'ensembl_id' not in input_configs.columns:
            input_configs['ensembl_id'] = 'No Interest Transcript'
        if 'gene_symbol' not in input_configs.columns:
            input_configs['gene_symbol'] = 'No Interest Gene'
        if 'comment' not in input_configs.columns:
            input_configs['comment'] = 'not analyzed!'
        if 'do_adj_srch' not in input_configs.columns:
            input_configs['do_adj_srch'] = '0'
        if 'in_range_splicing' not in input_configs.columns:
            input_configs['in_range_splicing'] = 0
        if 'in_range_transcription' not in input_configs.columns:
            input_configs['in_range_transcription'] = 0
        if 'in_range_trans_init' not in input_configs.columns:
            input_configs['in_range_trans_init'] = 0
        if 'max_transcription_name' not in input_configs.columns:
            input_configs['max_transcription_name'] = 'Not Analyzed'
        if 'max_trans_init_name' not in input_configs.columns:
            input_configs['max_trans_init_name'] = 'Not Analyzed'
        if 'max_splicing_name' not in input_configs.columns:
            input_configs['max_splicing_name'] = 'Not Analyzed'
        if 'Class' not in input_configs.columns:
            input_configs['Class'] = 'Not Classified'
        if np.all(input_configs['use_mut_predictor']=='1'):
            run_classifier = True
            self._show_message(f'Analyzing sgRNAs!', run_on_GUI)
            input_configs['spacer'] = input_configs['target_seq'].apply(lambda x: x[:20])
            input_configs = input_configs.merge(GuidePro_scores, on='spacer', how='left')
            input_configs = input_configs.merge(VBC_scores, on='spacer', how='left')
            input_configs = input_configs.drop(columns=['spacer'])
            input_configs['GuidePro'] = input_configs['GuidePro score'].apply(lambda x: np.median([float(x) for x in x.split(',')]))
            input_configs['VBC'] = input_configs['VBCScore'].apply(lambda x: np.median([float(x) for x in x.split(',')]))
            input_configs = input_configs.drop(columns=['VBCScore', 'GuidePro score'])
        elif np.all(input_configs['use_mut_predictor']=='0'):
            self._show_message(f'Analyzing manual mutations!', run_on_GUI)
            run_classifier = False
        else:
            self._show_message(f'Error! sgRNAs and manual mutations are in the same file!\n Please split manually inserted mutations into one file and sgRNAs into another file and run each separately', run_on_GUI)
            self._show_message(f'-----------------------------------------------------', run_on_GUI)
            self.finished.emit()

        chrms_strings = ['chr'+str(x) for x in range(1,23)]
        chrms_strings.append('chrX')
        chrms_strings.append('chrY')

        transcription_norm = 0.97
        transcription_thresh = 0.02
        splicing_norm = 105944
        splicing_thresh = 0.000198
        trans_init_norm = 65.42
        trans_init_thresh = 0.001
        for i in input_configs.index:
            try:
                # if input_configs.loc[i,'target_seq']!='CGATAATCTCTTCATCACCATGG':
                #     continue
                input_configs.loc[i, 'comment'] = 'Analyzing...'
                count+=1
                self._show_message('-----------------------------------------------------',run_on_GUI)
                self._show_message(str(datetime.datetime.now())[:-7],run_on_GUI)
                self._show_message(f'site {i}',run_on_GUI)
                if input_configs.shape[0] > 1:
                    self._show_message(f'Running configuration of index {i} ({count} out of {input_configs.shape[0]}):',run_on_GUI)
                    # self._show_message(str(input_configs.loc[i,::-1]),run_on_GUI)
                self._show_message('Analyzing...',run_on_GUI)
                if input_configs.loc[i,'use_mut_predictor']=='1' and not input_configs.loc[i,'site_start_pos']:
                    self._show_message(f'******ERROR******',run_on_GUI)
                    self._show_message('Need to specify Start of Site!',run_on_GUI)
                    input_configs.loc[i, 'comment'] = 'No Start of Site!'
                    self._show_message(f'Aborting case {i}!',run_on_GUI)
                    all_sites_success = False
                    continue

                exp_mut_dict = dict(input_configs.loc[i,:])
                exp_mut_dict['Error']=''
                exp_mut_dict['site_chr'] = [exp_mut_dict['site_chr'] if len(exp_mut_dict['site_chr']) < 3
                                            else exp_mut_dict['site_chr'][3:]][0]
                #check chromosome is inputted correctly
                if 'chr'+exp_mut_dict['site_chr'] not in chrms_strings:
                    self._show_message(f'******ERROR******', run_on_GUI)
                    self._show_message(f'Chromsome not inputted correctly', run_on_GUI)
                    self._show_message(f'Chromsome input should be "chr" followed by 1-22 or X or Y, e.g. chrX or chr7', run_on_GUI)
                    input_configs.loc[i, 'comment'] = 'Chromosome not inputted correctly'
                    self._show_message(f'Aborting case {i}!', run_on_GUI)
                    all_sites_success = False
                    continue

                if input_configs.loc[i,'use_mut_predictor']=='1': # we're predicting the mutations i.e. assuming CRISPR induced
                    exp_mut_dict['site_start_pos'] = int(exp_mut_dict['site_start_pos'])
                    if exp_mut_dict['site_strand'] == '+': #CS
                        exp_mut_dict['cut_site_pos'] = exp_mut_dict['site_start_pos'] + 16
                    else:
                        #ins_pos = exp_mut_dict['site_start_pos'] - 1 -18
                        exp_mut_dict['cut_site_pos'] = exp_mut_dict['site_start_pos'] - 17 # was -16 TODO make sure

                    #in_pos
                    exp_mut_dict['INS_ins_pos'] = [exp_mut_dict['cut_site_pos'] if exp_mut_dict['site_strand'] == '+'
                                                   else exp_mut_dict['cut_site_pos'] -1 ][0]


                    self._show_message('Cut site location information:',run_on_GUI)

                    self._show_message('Target Site: {}{}{}'.format(exp_mut_dict['target_seq'][:16],exp_mut_dict['target_seq'][16],exp_mut_dict['target_seq'][17:]),run_on_GUI)
                    self._show_message(f"- Site Start Position: {exp_mut_dict['site_start_pos']}",run_on_GUI)
                    self._show_message(f"- Cut Site Position: {exp_mut_dict['cut_site_pos']}",run_on_GUI)
                    self._show_message(f"- Chromosome: {exp_mut_dict['site_chr']}",run_on_GUI)
                    self._show_message(f"- Strand: {exp_mut_dict['site_strand']}",run_on_GUI)

                    #
                    # chrm_path = os.path.join(data_path, 'Chromosome',
                    #                          'Homo_sapiens.GRCh38.dna_sm.chromosome.' + exp_mut_dict['site_chr'] + '.fa')
                    # read_target_seq = splu.pull_fasta_seq(chrm_path, exp_mut_dict['site_start_pos'], 0, 22,
                    #                                       False if exp_mut_dict['site_strand'] == '+' else True)  #need to verify this is correct! ASK YORAM\Nico why -1 inside func?
                    # read_target_seq = read_target_seq.upper()

                    if exp_mut_dict['site_strand'] == '+':
                        start_target_seq = exp_mut_dict['site_start_pos']
                        end_target_seq = exp_mut_dict['site_start_pos'] + 23
                    else:
                        start_target_seq = exp_mut_dict['site_start_pos'] - 23  # was -22
                        end_target_seq = exp_mut_dict['site_start_pos']  # was +1

                    read_target_seq, _ = read_from_chr(exp_mut_dict['site_chr'], exp_mut_dict['site_strand'],
                                                       start_target_seq, end_target_seq)

                    if read_target_seq[:20] != exp_mut_dict['target_seq'][:20]:
                        self._show_message(f'******ERROR******', run_on_GUI)
                        self._show_message(f'Target Seq by user and Target Seq in genome are not the same!', run_on_GUI)
                        self._show_message(f'Genome Target Seq: {read_target_seq}!', run_on_GUI)
                        self._show_message(f"User Target Seq: {exp_mut_dict['target_seq']}", run_on_GUI)
                        input_configs.loc[i, 'comment'] = 'User Target Seq != Genome Target Seq'
                        self._show_message(f'Aborting case {i}!', run_on_GUI)
                        all_sites_success = False
                        continue
                    exp_mut_dict['target_seq'] = read_target_seq  # 23 nts

                else:
                    self._show_message(f"- Chromosome: {exp_mut_dict['site_chr']}",run_on_GUI)


                if exp_mut_dict['use_mut_predictor'] != '1' and exp_mut_dict['use_mut_predictor'] != '0':
                    self._show_message(f'******ERROR******',run_on_GUI)
                    self._show_message(f'Please set use_mut_predictor as 1 or 0',run_on_GUI)
                    self._show_message(f'Aborting case {i}!',run_on_GUI)
                    input_configs.loc[i, 'comment'] = 'Mut Predictorisn''t set as 0 or 1'
                    all_sites_success = False
                    continue
                if exp_mut_dict['use_mut_predictor'] == '1':
                    mut_predictor='Lindel'
                    if mut_predictor=='SPROUT':
                        self._show_message('Using SPROUT!',run_on_GUI)
                        sprout_output = sprout_pred_outcome(exp_mut_dict['target_seq'],models_path)
                        sprout_output['mut_predictor_name'] = 'SPROUT'
                        exp_mut_dict = self.transform_predictor_results(exp_mut_dict,sprout_output)
                    elif mut_predictor=='Lindel':
                        exp_mut_dict['mut_predictor_name'] = 'Lindel'
                        lindel_crispredict_output = self.predict_crispredict_lindel(exp_mut_dict)
                        exp_mut_dict = self.transform_predictor_results(exp_mut_dict,lindel_crispredict_output)

                    self._show_message(f'Mutations predicted for site {i}:', run_on_GUI)
                    mut_df_norm = exp_mut_dict["mut"].copy()
                    mut_df_norm['frequency'] = exp_mut_dict['eff'] * mut_df_norm['frequency']
                    del mut_df_norm['mut_type']
                    del mut_df_norm['del_nts']
                    mut_df_norm.rename(columns={'frequency': 'Probability',
                                                'ins_nt': 'Inserted Nts (+)',
                                                'indels': 'Mut. Type',
                                                'del_start': 'Del. Start',
                                                'del_len': 'Del. Length'}, inplace=True)
                    self._show_message(f'{mut_df_norm}:', run_on_GUI)
                else:
                    self._show_message('Using manually inserted mutations!',run_on_GUI)
                    exp_mut_dict['cut_site_pos'] = exp_mut_dict['INS_ins_pos']
                    exp_mut_dict['site_strand'] = '+'
                    exp_mut_dict = self.parse_man_muts(exp_mut_dict)

                if exp_mut_dict['Error']!='':
                    self._show_message(f'******ERROR******',run_on_GUI)
                    self._show_message(f"Error In Site {i} - {exp_mut_dict['Error']}",run_on_GUI)
                    self._show_message(f'Aborting case {i}!',run_on_GUI)
                    input_configs.at[i, 'comment'] = exp_mut_dict['Error']
                    all_sites_success = False
                    continue

                #Validate mutations agree with what was read from chromosome
                if exp_mut_dict['use_mut_predictor']=='0':
                    if np.any(exp_mut_dict['DEL_prob']>0):
                        for i_del in range(len(exp_mut_dict['DEL_prob'])):
                            read_DEL_del_nts,_ = read_from_chr(exp_mut_dict['site_chr'],'+',
                                                                   exp_mut_dict['DEL_del_start'][i_del],
                                                                   exp_mut_dict['DEL_del_start'][i_del]+len(exp_mut_dict['DEL_del_nts'][i_del]))
                            if exp_mut_dict['DEL_del_nts'][i_del]!=read_DEL_del_nts:
                                self._show_message(f'******ERROR******',run_on_GUI)
                                self._show_message(f"In Site {i} - DEL nts read from chr {exp_mut_dict['site_chr']} differ from input DEL del nts!",run_on_GUI)
                                self._show_message(f"Input DEL deleted nts (#{i_del} from DEL) are {exp_mut_dict['DEL_del_nts'][i_del]}",run_on_GUI)
                                self._show_message(f"Read DEL deleted nts (#{i_del} from DEL) are {read_DEL_del_nts}",run_on_GUI)
                                self._show_message(f'Aborting case {i}!',run_on_GUI)
                                exp_mut_dict['Error'] = f"In Site {i} - DEL nts read from chr {exp_mut_dict['site_chr']} differ from input DEL del nts!"
                                break
                        if exp_mut_dict['Error']!='':
                            input_configs.at[i, 'comment'] = exp_mut_dict['Error']
                            all_sites_success = False
                            continue
                    if np.any(exp_mut_dict['SUB_prob']>0):
                        for i_sub in range(len(exp_mut_dict['SUB_prob'])):
                            read_SUB_del_nts,_ = read_from_chr(exp_mut_dict['site_chr'], '+',
                                                exp_mut_dict['SUB_del_start'][i_sub],
                                                exp_mut_dict['SUB_del_start'][i_sub] + len(
                                                    exp_mut_dict['SUB_del_nts'][i_sub]))
                            if exp_mut_dict['SUB_del_nts'][i_sub]!=read_SUB_del_nts:
                                self._show_message(f"In Site {i} - DEL nts read from chr {exp_mut_dict['site_chr']} differ from input SUB del nts!",run_on_GUI)
                                self._show_message(f"Input SUB deleted nts (#{i_sub} from SUB) are {exp_mut_dict['SUB_del_nts'][i_sub]}",run_on_GUI)
                                self._show_message(f"Read SUB deleted nts (#{i_sub} from SUB) are {read_SUB_del_nts}",run_on_GUI)
                                self._show_message(f'Aborting! case {i}!',run_on_GUI)
                                exp_mut_dict['Error'] = f"In Site {i} - DEL nts read from chr {exp_mut_dict['site_chr']} differ from input SUB del nts!"
                                break
                        if exp_mut_dict['Error']!='':
                            input_configs.at[i, 'comment'] = exp_mut_dict['Error']
                            all_sites_success = False
                            continue

                if exp_mut_dict['do_adj_srch']=='1':
                    within_genes, adj_genes = self.get_adj_info(exp_mut_dict)
                    self._update_genomic_feature_in_result_2(exp_mut_dict,within_genes, adj_genes, run_on_GUI)

                input_configs.at[i,'mut_df'] = exp_mut_dict['mut'].copy()
                input_configs.at[i, 'eff'] = exp_mut_dict['eff']
                input_configs.at[i,'DEL_prob'] = '/'.join([str(x) for x in exp_mut_dict['DEL_prob']])
                if np.any(exp_mut_dict['DEL_prob']>0):
                    input_configs.at[i,'DEL_del_start'] = '/'.join([str(x) for x in exp_mut_dict['DEL_del_start']])
                    input_configs.at[i,'DEL_del_nts'] = '/'.join([str(x) for x in exp_mut_dict['DEL_del_nts']])
                    input_configs.at[i,'DEL_names'] = '/'.join([str(x) for x in exp_mut_dict['DEL_names']])
                if np.any(exp_mut_dict['INS_prob']>0):
                    input_configs.at[i,'INS_prob'] = '/'.join([str(x) for x in exp_mut_dict['INS_prob']])
                    input_configs.at[i,'INS_ins_pos'] = '/'.join([str(x) for x in exp_mut_dict['INS_ins_pos']])
                    input_configs.at[i,'INS_ins_mut'] = '/'.join([str(x) for x in exp_mut_dict['INS_ins_mut']])
                    input_configs.at[i,'INS_names'] = '/'.join([str(x) for x in exp_mut_dict['INS_names']])
                if np.any(exp_mut_dict['SUB_prob']>0):
                    input_configs.at[i,'SUB_prob'] = '/'.join([str(x) for x in exp_mut_dict['SUB_prob']])
                    input_configs.at[i,'SUB_ins_mut'] = '/'.join([str(x) for x in exp_mut_dict['SUB_ins_mut']])
                    input_configs.at[i,'SUB_names'] = '/'.join([str(x) for x in exp_mut_dict['SUB_names']])
                    input_configs.at[i,'SUB_del_start'] = '/'.join([str(x) for x in exp_mut_dict['SUB_del_start']])
                    input_configs.at[i,'SUB_del_nts'] = '/'.join([str(x) for x in exp_mut_dict['SUB_del_nts']])

                ### Debugging
                # del_neg_nts = [reverse_complement(x) for x in exp_mut_dict['DEL_del_nts']]
                # print(i)
                # ins_pos = exp_mut_dict['INS_ins_pos']-1
                # print(f"{exp_mut_dict['INS_ins_pos']} (one base) INS POS")
                # print(exp_mut_dict['INS_ins_mut'])
                # if exp_mut_dict['site_strand']=='-':
                    # print(del_neg_nts)
                    # print([reverse_complement(x) for x in exp_mut_dict['INS_ins_mut']])
                # else:
                    # print(exp_mut_dict['DEL_del_nts'])
                # print(exp_mut_dict['site_strand'])
                # print(exp_mut_dict['site_chr'])
                # print(read_target_seq)
                # reverse_complement(chrs['chr'+exp_mut_dict['site_chr']][ins_pos - 5:ins_pos+1].seq + 'N' + chrs['chr'+exp_mut_dict['site_chr']][ins_pos+1:ins_pos + 18].seq)
                # chrs['chr'+exp_mut_dict['site_chr']][ins_pos - 16:ins_pos+1].seq + 'N' + chrs['chr'+exp_mut_dict['site_chr']][ins_pos+1:ins_pos + 7].seq
                if exp_mut_dict['gene_symbol'] == 'No Interest Gene':
                    self._show_message(f'No interest gene for case {i}',run_on_GUI)
                    self._show_message(f'Acquiring affected genes...',run_on_GUI)
                    interest_genes = self.find_interest_genes(exp_mut_dict,transcripts_df)
                    any_gene_affected = interest_genes['gene'].to_list()
                else:
                    curr_interest_transcript = transcripts_df.loc[transcripts_df['gene'] == input_configs.loc[i, 'gene_symbol'], :]
                    interest_genes = self.find_interest_genes(exp_mut_dict,curr_interest_transcript)
                    any_gene_affected = self.find_interest_genes(exp_mut_dict, transcripts_df)
                    any_gene_affected = any_gene_affected['gene'].to_list()
                if len(any_gene_affected)>1:
                    input_configs.loc[i,'mult_gene_affect'] = '1'
                else:
                    input_configs.loc[i,'mult_gene_affect'] = '0'

                interest_genes['max_transcription_name'] = ''
                interest_genes['max_splicing_name'] = ''
                interest_genes['max_trans_init_name'] = ''
                interest_genes['no_p_no_norm_transc_scores'] = ''
                interest_genes['no_p_no_norm_splicing_scores'] = ''
                interest_genes['no_p_no_norm_trans_init_scores'] = ''
                scores_types = []
                scores_names = []
                if exp_mut_dict['do_transcription'] == '1':
                    scores_types.append('transcription_score')
                    scores_names.append('Transcription')
                if exp_mut_dict['do_splicing'] == '1':
                    scores_types.append('splicing_score')
                    scores_names.append('Splicing')
                if exp_mut_dict['do_initiation'] == '1':
                    scores_types.append('trans_init_score')
                    scores_names.append('Translation Initiation')
                    reacquire_tis_method = 'TITER'
                else:
                    reacquire_tis_method = 'GENERIC'

                for s_type in scores_types:
                    interest_genes[s_type] = 0

                #set up default clinvar scores
                interest_genes['significant_transcription'] = '-'
                interest_genes['significant_trans_init'] = '-'
                interest_genes['significant_splicing'] = '-'

                if interest_genes.empty:
                    if input_configs.loc[i, 'gene_symbol'] not in GENE_SYMBOLS:
                        self._show_message('Can\'t find Gene {}'.format(input_configs.loc[i,'gene_symbol']),run_on_GUI)
                        self._show_message(f'Aborting! case {i}!',run_on_GUI)
                        input_configs.loc[i, 'comment'] = f'Can\'t find Gene {input_configs.loc[i,"gene_symbol"]}'

                    else: # mutation does not affect any aspect of gene expression (can only be if it's not inside the gene or within 7000 of any of its TSSs)
                        any_gene_message = input_configs.loc[i, 'gene_symbol']=='No Interest Gene'
                        if any_gene_message:
                            self._show_message('Site {} does not affect any gene\'s expression.'.format(i),run_on_GUI)
                            input_configs.loc[i, 'comment'] = 'Success!'
                            if (exp_mut_dict['do_splicing']=='1' or exp_mut_dict['do_initiation']=='1'):
                                input_configs.loc[i, 'TITER_interesting'] = 'No alt init!'
                                input_configs.loc[i, 'SAI_interesting'] = 'No missplicing!'
                            for s_type in scores_types:
                                input_configs.loc[i, f'all_int_genes_{s_type}'] = 'No Gene Affected: 0'
                                input_configs.loc[i, s_type] = '0'
                        else:
                            self._show_message('Site {} does not affect expression of gene {} .'.format(i, input_configs.loc[i, 'gene_symbol']),run_on_GUI)
                            input_configs.loc[i, 'comment'] = 'Success!'
                            if (exp_mut_dict['do_splicing']=='1' or exp_mut_dict['do_initiation']=='1'):
                                input_configs.loc[i, 'TITER_interesting'] = 'No alt init!'
                                input_configs.loc[i, 'SAI_interesting'] = 'No missplicing!'
                            for s_type in scores_types:
                                input_configs.loc[i, f'all_int_genes_{s_type}'] = f"{input_configs.loc[i, 'gene_symbol']}: 0"
                                input_configs.loc[i, s_type] = '0'

                        self._show_message(f'Success!',run_on_GUI)
                    continue
                else:
                    self._show_message(f"Interest Genes for site {i} are:\n{interest_genes.loc[:,['gene','model_mut']]}",run_on_GUI)

                SAI_int_muts = ''
                TITER_int_muts = ''
                if input_configs.loc[i, 'ensembl_id']!='No Interest Transcript':
                    interest_transcript = transcripts_df.loc[(transcripts_df['ID'] == input_configs.loc[i, 'ensembl_id']) |
                                                             (transcripts_df['ID_raw'] == input_configs.loc[
                                                                 i, 'ensembl_id']), :]
                    if interest_transcript.empty:
                        self._show_message('Can\'t find ENST {}'.format(input_configs.loc[i, 'ensembl_id']), run_on_GUI)
                        self._show_message(f'Aborting! case {i}!', run_on_GUI)
                        input_configs.loc[i, 'comment'] = 'Can\'t find ENST {}.'.format(input_configs.loc[i, 'ensembl_id'])
                        continue
                    #this shouldn't do anything since we expect there to be a single gene in this df at this point
                    interest_genes = interest_genes[interest_genes['gene']==interest_transcript['gene'].iloc[0]]
                else: #No Interest Transcript
                    interest_transcript = transcripts_df.loc[transcripts_df['ID'] == input_configs.loc[i, 'ensembl_id'],:]

                for i_interest_gene in interest_genes.index:
                    # if interest_genes['strand'].iloc[0]!='+':
                    #     continue
                    print('Gene strand:')
                    print(interest_genes['strand'])
                    curr_gene_chr_num = interest_genes.loc[i_interest_gene, 'chrm'][3:]
                    if curr_gene_chr_num != exp_mut_dict['site_chr']: #shouldn't happen, unless user saved a csv with wrong data
                        self._show_message(f'Chromosome mismatch between site and gene for case {i}',run_on_GUI)
                        self._show_message(
                            'Input chr: {}\nGene chr: {}'.format(input_configs.loc[i, 'site_chr'],
                                                                 curr_gene_chr_num),run_on_GUI)
                        input_configs.loc[i, 'comment'] = 'Chromosome mismatch between site and gene'
                        self._show_message(f'Aborting! case {i}!',run_on_GUI)
                        continue




                    curr_models_muts =  interest_genes.loc[i_interest_gene, 'model_mut'].split(',')

                    #run all mutations in Xpresso (prediciting is probably faster this way)
                    XP_muts = [x for x in curr_models_muts if 'XP' in x]
                    if len(XP_muts)>0:
                        input_configs.loc[i,'in_range_transcription'] = 1
                    if len(XP_muts) > 0 and exp_mut_dict['do_transcription'] == '1':
                        max_score, no_p_no_norm_transc_scores, max_transc_name = pred_transcription_for_mut_gene(interest_genes.loc[i_interest_gene, :], exp_mut_dict, XP_muts)
                        interest_genes.loc[i_interest_gene,'transcription_score'] = max_score/transcription_norm#normalize
                        interest_genes.loc[i_interest_gene,'max_transcription_name'] = max_transc_name
                        if input_configs.loc[i,'increased_sensitivity'] =='0':
                            interest_genes.loc[i_interest_gene,'significant_transcription'] = ['Significant' if max_score/exp_mut_dict['eff']>transcription_thresh else 'Not Significant'][0]
                        else:
                            interest_genes.loc[i_interest_gene, 'significant_transcription'] = ['Significant' if (1/transcription_norm)*max(no_p_no_norm_transc_scores.values())/exp_mut_dict['eff']>transcription_thresh else 'Not Significant'][0]
                    else:
                        interest_genes.loc[i_interest_gene,'max_transcription_name'] = 'None'
                        # for i in range(4):
                        #     interest_genes.loc[i_interest_gene,f'XP_mut_{i}'] = '-'
                        # xp_count = 0
                        # for k in mut_scores.keys():
                        #     interest_genes.loc[i_interest_gene,f'XP_mut_{xp_count}'] = f'Name: {k} {mut_scores[k]}'
                        #     xp_count+=1

                    #run each mutation one at a time in oncosplice
                    ST_muts = [x for x in curr_models_muts if 'ST' in x]
                    if len(ST_muts) > 0:
                        input_configs.loc[i, 'in_range_splicing'] = 1
                    if len(ST_muts)>0 and (exp_mut_dict['do_splicing']=='1' or exp_mut_dict['do_initiation']=='1'):
                        if input_configs.loc[i,'SAI_interesting']!='?':
                            if str(input_configs.loc[i,'SAI_interesting']) not in ['nan','No missplicing!']:
                                curr_SAI_muts = input_configs.loc[i, 'SAI_interesting'].split('/')
                            else:
                                curr_SAI_muts = []
                        else:
                            curr_SAI_muts = ST_muts
                        #### curr_SAI_muts = ST_muts
                        for i_model_mut in range(len(ST_muts)):
                            curr_model, curr_mut, curr_mut_idx = ST_muts[i_model_mut].split('_')
                            curr_mut_idx=int(curr_mut_idx)
                            if curr_mut == 'DEL':
                                onco_mut = [':'.join([interest_genes.loc[i_interest_gene,'gene'],
                                                     interest_genes.loc[i_interest_gene,'chrm'][3:],
                                                     str(exp_mut_dict['DEL_del_start'][curr_mut_idx]),
                                                     exp_mut_dict['DEL_del_nts'][curr_mut_idx],'-'])]
                            elif curr_mut == 'INS':
                                onco_mut = [':'.join([interest_genes.loc[i_interest_gene, 'gene'],
                                                      interest_genes.loc[i_interest_gene, 'chrm'][3:],
                                                      str(exp_mut_dict['INS_ins_pos'][curr_mut_idx]),
                                                      '-', exp_mut_dict['INS_ins_mut'][curr_mut_idx]])]
                            elif curr_mut == 'SUB':
                                onco_mut = [':'.join([interest_genes.loc[i_interest_gene, 'gene'],
                                                      interest_genes.loc[i_interest_gene, 'chrm'][3:],
                                                      str(exp_mut_dict['SUB_del_start'][curr_mut_idx]),
                                                      exp_mut_dict['SUB_del_nts'][curr_mut_idx],
                                                      exp_mut_dict['SUB_ins_mut'][curr_mut_idx]])]

                            if interest_transcript['ID'].values[0]=='No Interest Transcript': #interest_transcript should be either just No Interest Transcript or just one of the ENSTS of the gene or all of the ENSTS of the gene
                                ENST_for_onco = 'All'
                            else:
                                ENST_for_onco = interest_transcript['ID'].values[0]

                            if ST_muts[i_model_mut] in curr_SAI_muts: #muts that need to run SAI (because they had missplicing)
                                self._show_message(f"Running SAI on {ST_muts[i_model_mut]} in site {i}!")
                                mg, so = run_oncosplice_interactive_shai(onco_mut,
                                                                     tis_reacquire_method=reacquire_tis_method,
                                                                     min_coverage=5000,
                                                                     ENST_for_onco=ENST_for_onco,
                                                                     titer_model=titer_model,
                                                                     TITER_path=os.path.join(models_path,'TITER'),
                                                                     init_search_dist=int(exp_mut_dict['init_search_dist']),
                                                                     final_search_dist=int(exp_mut_dict['final_search_dist']),
                                                                     titer_thresh = float(exp_mut_dict['titer_threshold']))
                            else: #muts that don't need to run SAI
                                self._show_message(f"No missplicing on {ST_muts[i_model_mut]} in site {i}!")
                                mg, so = run_oncosplice_interactive_shai(onco_mut,
                                                                     tis_reacquire_method=reacquire_tis_method,
                                                                     min_coverage=5000,
                                                                     ENST_for_onco=ENST_for_onco,
                                                                     titer_model=titer_model,
                                                                     run_spliceai=False,
                                                                     aberrant_splicing={'discovered_donors':[],'discovered_acceptors':[],'missed_donors':[],'missed_acceptors':[]},
                                                                     TITER_path=os.path.join(models_path,'TITER'),
                                                                     init_search_dist = int(exp_mut_dict['init_search_dist']),
                                                                     final_search_dist = int(exp_mut_dict['final_search_dist']),
                                                                     titer_thresh=float(exp_mut_dict['titer_threshold']))
                            if exp_mut_dict['do_splicing'] == '1':
                                if ENST_for_onco == 'All':
                                    curr_raw_onco_score = mg['max_onco_score']
                                else:
                                    curr_raw_onco_score = so.loc[so['transcript_id'] == ENST_for_onco, :]['score'].values[0]

                                interest_genes.loc[i_interest_gene, 'splicing_score'] += curr_raw_onco_score*exp_mut_dict[curr_mut+'_prob'][curr_mut_idx]/splicing_norm
                                interest_genes.loc[i_interest_gene, 'max_splicing_name'] = mg['max_splicing_name']
                                interest_genes.loc[i_interest_gene, 'no_p_no_norm_splicing_scores'] = \
                                    ','.join([interest_genes.loc[i_interest_gene, 'no_p_no_norm_splicing_scores'],f'{curr_raw_onco_score}'])

                            # #save SpliceAI+onco secondary results #if want to improve DEBUG then make this for every gene analyzed not per site
                            # if ~np.all(so.conservation_available):
                            #     input_configs.loc[i,'conservation_available'] = 0
                            if mg['interesting']:
                                SAI_int_muts = '/'.join(
                                    [SAI_int_muts,ST_muts[i_model_mut]])
                            if mg['TITER_interesting']==1:
                                TITER_int_muts = '/'.join(
                                    [TITER_int_muts, ST_muts[i_model_mut]])
                                input_configs.loc[i, 'in_range_trans_init'] = 1

                            if exp_mut_dict['do_initiation']=='1':
                                if ENST_for_onco == 'All':
                                    curr_raw_trans_init_score = mg['max_TITER_rel_delta_rank']
                                else:
                                    curr_raw_trans_init_score = so.loc[so['transcript_id'] == ENST_for_onco, :].TITER_rel_delta_rank.mean()
                                    # so.groupby('transcript_id').TITER_rel_delta_rank.mean()
                                interest_genes.loc[i_interest_gene, 'trans_init_score'] += curr_raw_trans_init_score * \
                                                                                           exp_mut_dict[curr_mut + '_prob'][
                                                                                               curr_mut_idx]/trans_init_norm
                                interest_genes.loc[i_interest_gene, 'max_trans_init_name'] = mg['max_trans_init_name']
                                interest_genes.loc[i_interest_gene, 'no_p_no_norm_trans_init_scores'] = \
                                    ','.join([interest_genes.loc[i_interest_gene, 'no_p_no_norm_trans_init_scores'],
                                             f'{curr_raw_trans_init_score}'])
                        if exp_mut_dict['do_splicing'] == '1':
                            interest_genes.loc[i_interest_gene, 'splicing_score'] = min(interest_genes.loc[i_interest_gene, 'splicing_score'], 1)
                            no_p_no_norm_splicing_scores = interest_genes.loc[i_interest_gene, 'no_p_no_norm_splicing_scores'][1:].split(',')
                            if input_configs.loc[i, 'increased_sensitivity'] == '0':
                                interest_genes.loc[i_interest_gene, 'significant_splicing'] = \
                                ['Significant' if interest_genes.loc[i_interest_gene, 'splicing_score'] / exp_mut_dict['eff'] > splicing_thresh else 'Not Significant'][0]
                            else:
                                interest_genes.loc[i_interest_gene, 'significant_splicing'] = [
                                    'Significant' if max([float(x)/splicing_norm for x in no_p_no_norm_splicing_scores]) / exp_mut_dict['eff'] > splicing_thresh else 'Not Significant'][0]
                        if exp_mut_dict['do_initiation'] == '1':
                            interest_genes.loc[i_interest_gene, 'trans_init_score'] = min(interest_genes.loc[i_interest_gene, 'trans_init_score'], 1)
                            no_p_no_norm_trans_init_scores = interest_genes.loc[i_interest_gene, 'no_p_no_norm_trans_init_scores'][1:].split(',')
                            if input_configs.loc[i, 'increased_sensitivity'] == '0':
                                interest_genes.loc[i_interest_gene, 'significant_trans_init'] = \
                                    ['Significant' if interest_genes.loc[i_interest_gene, 'trans_init_score'] / exp_mut_dict[
                                        'eff'] > trans_init_thresh else 'Not Significant'][0]
                            else:
                                interest_genes.loc[i_interest_gene, 'significant_trans_init'] = [
                                    'Significant' if max([float(x)/trans_init_norm for x in no_p_no_norm_trans_init_scores]) / exp_mut_dict[
                                        'eff'] > trans_init_thresh else 'Not Significant'][0]
                    self._show_message(f"Scores for site {i}, Gene - {interest_genes.loc[i_interest_gene, 'gene']}, Transcript - {exp_mut_dict['ensembl_id']} are:",run_on_GUI)
                    for s_type, s_name in zip(scores_types, scores_names):
                        self._show_message(f"\t{s_name} Max Transcript: {interest_genes.loc[i_interest_gene, f'max_{s_type[:-6]}_name']}",run_on_GUI)
                        self._show_message(f"\t{s_name} Score: {interest_genes.loc[i_interest_gene, f'{s_type}']:.5f}",run_on_GUI)
                        self._show_message(f"\t{s_name} Effect: {interest_genes.loc[i_interest_gene, 'significant_'+s_type[:-6]]} ({['Increased Sensitivity' if input_configs.loc[i,'increased_sensitivity']=='1' else 'Normal Sensitivity'][0]})",run_on_GUI)

                #for each score get the score of the biggest changed gene but also keep the scores of the other genes
                #then notify user
                if exp_mut_dict['do_splicing'] == '1':
                    input_configs.loc[i, 'SAI_interesting'] = 'No missplicing!' if len(SAI_int_muts)==0 else SAI_int_muts
                if exp_mut_dict['do_initiation'] == '1':
                    input_configs.loc[i, 'TITER_interesting'] = 'No alt init!' if len(TITER_int_muts)==0 else TITER_int_muts

                self._show_message(f"Final Scores for site {i} are:",run_on_GUI)

                for s_type,s_name in zip(scores_types,scores_names):
                    input_configs.loc[i, f'all_int_genes_{s_type}'] = '/'.join(
                            [f' {gene_name}: {score} ' for gene_name, score in
                             zip(interest_genes['gene'], interest_genes[f'{s_type}'])])
                    max_gene = interest_genes[interest_genes[f'{s_type}'] == max(interest_genes[f'{s_type}'])]
                    input_configs.loc[i, f'{s_type}'] = str(round(100000*max_gene[f'{s_type}'].iloc[0])/100000)
                    input_configs.loc[i, f'{"significant_"+s_type[:-6]}'] = max_gene['significant_' + s_type[:-6]].iloc[0]
                    self._show_message(
                    f"\t{s_name} Max Transcript: {input_configs.loc[i, f'{s_type}']} (Gene - {'/'.join(max_gene['gene'].values)}, Transcript - {'/'.join(max_gene[f'max_{s_type[:-6]}_name'].values)})",
                    run_on_GUI)
                    self._show_message(
                        f"\t{s_name} Effect: {input_configs.loc[i,'significant_'+s_type[:-6]]} ({['Increased Sensitivity' if input_configs.loc[i,'increased_sensitivity']=='1' else 'Normal Sensitivity'][0]})\n",
                        run_on_GUI)
                    # self._show_message(
                    #     f"\n",
                    #     run_on_GUI)
                if run_classifier:
                    eff_score = input_configs.loc[i,'eff']
                    GP_score = input_configs.loc[i,'GuidePro']
                    VBC_score = input_configs.loc[i, 'VBC']
                    splicing_score = float(input_configs.loc[i, 'splicing_score'])
                    transcription_score = float(input_configs.loc[i, 'transcription_score'])
                    trans_init_score = float(input_configs.loc[i, 'trans_init_score'])
                    if ~np.isnan(GP_score) and ~np.isnan(VBC_score):
                        pred_class = EXP_VBC_GP_svm_model.predict([[eff_score, GP_score, VBC_score,
                                                      splicing_score, transcription_score, trans_init_score]])
                    elif ~np.isnan(GP_score):
                        pred_class = EXP_GP_svm_model.predict([[eff_score, GP_score,
                                                      splicing_score, transcription_score, trans_init_score]])
                    elif ~np.isnan(VBC_score):
                        pred_class = EXP_VBC_svm_model.predict([[eff_score, VBC_score,
                                                      splicing_score, transcription_score, trans_init_score]])
                    else:
                        pred_class = EXP_svm_model.predict([[eff_score,
                                                      splicing_score, transcription_score, trans_init_score]])
                    input_configs.loc[i,'Class'] = 'Silencing' if pred_class[0]==1 else 'Non-Silencing'
                    self._show_message(f"\t sgRNA predicted to be {input_configs.loc[i,'Class']}",run_on_GUI)
                input_configs.loc[i,'comment'] = 'Success!'
            except Exception as e:
                self._show_message(f'Site {i} Unencountered ERROR!',run_on_GUI)
                self._show_message(traceback.format_exc(),run_on_GUI)
                input_configs.at[i, 'comment'] = traceback.format_exc()
                all_sites_success = False
        try:
            if all_sites_success:
                self._show_message(f'>> Finished analyzing "{df_name}" - {input_configs.shape[0]} sites!',run_on_GUI)
            else:
                self._show_message(f'>> Error while analyzing "{df_name}" - occurred in site {i}!',run_on_GUI)
                self._show_message(f'>> Saving results from sites up to it',run_on_GUI)
            if save_results:
                results_name = 'Results_' + str(datetime.datetime.now())[:-7] + '_' + df_name
                results_name = results_name.replace(':','-')
                if not (results_name.endswith('.pkl') or results_name.endswith('.csv')):
                    results_name +='.csv'
                if results_name[-7:]=='.pickle':
                    results_name = results_name[:-7]+'.pkl'
                if not all_sites_success:
                    results_name = results_name[:-4]+f'_ERROR_in_{i}' + results_name[-4:]
                if results_name[-4:]=='.csv':
                    input_configs.to_csv(os.path.join(results_path,f'{results_name}'), index=False)
                elif results_name[-4:]=='.pkl':
                    input_configs.to_pickle(os.path.join(results_path,f'{results_name}'))
                self._show_message(f'>> Saved result in {os.path.join(results_path,results_name)}',run_on_GUI)
        except:
            self._show_message(traceback.format_exc(), run_on_GUI)
            self._show_message('Failed to save results!', run_on_GUI)

        self._show_message(f'Analysis took {round(time()-t0)} seconds',run_on_GUI)
        self._show_message(f'Finished current analysis!',run_on_GUI)
        self._show_message(f'-----------------------------------------------------',run_on_GUI)
        self.finished.emit()


class Ui_MainWindow(QtWidgets.QWidget):
    def _flash_status_bar_message(self, message):
        self.statusBar.showMessage(message, DEFAULT_MESSAGE_TIME_MSECS)

    def _show_status_bar_message(self, message):
        self.statusBar.showMessage(message)

    def set_text_box_state(self, text_box, is_valid, message):
        if is_valid:
            text_box.setStyleSheet('')
            self.validated_text_boxes[text_box.objectName()] = True
        else:
            color = '#f6989d' # red
            text_box.setStyleSheet(f'QLineEdit {{ background-color: {color} }}')
            self._flash_status_bar_message(message)
            self.validated_text_boxes[text_box.objectName()] = False
        self.analyze_button.setEnabled(all(self.validated_text_boxes.values()))

    @QtCore.pyqtSlot()
    def check_state(self, message):
        sender = self.sender()
        validator = sender.validator()
        state = validator.validate(sender.text(), 0)[0]
        self.set_text_box_state(sender, state == QtGui.QValidator.Acceptable, message)

    def add_double_validator_zero_to_one(self, text_box):
        double_validator_zero_to_one = QtGui.QRegExpValidator(QtCore.QRegExp('^1|0|(0[.]\d+[/]*)+$'))
        text_box.setValidator(double_validator_zero_to_one)
        text_box.textChanged.connect(functools.partial(self.check_state,
            "Value expected to be a floating point between 0.0 to 1.0"))
        self.validated_text_boxes[text_box.objectName()] = True

    def add_mut_validator(self, text_box):
        mut_validator = QtGui.QRegExpValidator(QtCore.QRegExp('^(?![/])+([ATGC/]+)$'))
        text_box.setValidator(mut_validator)
        text_box.textChanged.connect(functools.partial(self.check_state,
            "Value expected to be a DNA sequence (A/T/G/C)"))
        self.validated_text_boxes[text_box.objectName()] = True


    def add_chr_validator(self,text_box):
        chr_validator = QtGui.QRegExpValidator(QtCore.QRegExp('(?:^[123456789]$|1[\d]|2[012]|^[XY]$)'))
        text_box.setValidator(chr_validator)
        text_box.textChanged.connect(functools.partial(self.check_state,
                                                       "Value expected to be a chromsome (1-22 or X\Y)"))
    def add_strand_validator(self,text_box):
        strand_validator = QtGui.QRegExpValidator(QtCore.QRegExp('^[+-]$'))
        text_box.setValidator(strand_validator)
        text_box.textChanged.connect(functools.partial(self.check_state,
                                                       "Value expected to be a +\-"))
        self.validated_text_boxes[text_box.objectName()] = True

    def add_int_validator(self, text_box):
        # int_validator = QtGui.QIntValidator()
        int_validator = QtGui.QRegExpValidator(QtCore.QRegExp('^(?![/])+(\d+[/]*)+'))
        text_box.setValidator(int_validator)
        text_box.textChanged.connect(functools.partial(self.check_state,
            "Value expected to an integer"))
        self.validated_text_boxes[text_box.objectName()] = True

    def add_pos_int_validator(self, text_box):
        # int_validator = QtGui.QIntValidator()
        int_validator = QtGui.QRegExpValidator(QtCore.QRegExp('[123456789]\d*'))
        text_box.setValidator(int_validator)
        text_box.textChanged.connect(functools.partial(self.check_state,
                                                       "Value expected to an integer greater than 0"))
        self.validated_text_boxes[text_box.objectName()] = True

    def is_target_seq_valid(self):
        self.target_seq_text_box.blockSignals(True) # Prevent recursive calls to this method.
        ACGT_re = re.compile('[ACGT]')
        text = self.target_seq_text_box.text()
        filtered_text = ''.join(ACGT_re.findall(text))
        self.target_seq_text_box.setText(filtered_text)
        self.target_seq_text_box.blockSignals(False) # Prevent recursive calls to this method.
        self.set_text_box_state(self.target_seq_text_box, len(filtered_text)==20,
            "Target Seq is supposed to be 20 nts long!")

    def use_man_mut_or_use_pred_clicked(self):
        block_signals = True
        self.N_muts_text_box.blockSignals(block_signals)
        self.target_seq_text_box.blockSignals(block_signals)
        self.site_strand_text_box.blockSignals(block_signals)
        self.site_start_pos_text_box.blockSignals(block_signals)
        self.manual_mut_radio.blockSignals(block_signals)
        self.mut_pred_radio.blockSignals(block_signals)
        self.ins_prob_text_box.blockSignals(block_signals)
        self.ins_mut_text_box.blockSignals(block_signals)
        self.ins_pos_text_box.blockSignals(block_signals)
        self.del_prob_text_box.blockSignals(block_signals)
        self.del_del_start_text_box.blockSignals(block_signals)
        self.del_del_nts_text_box.blockSignals(block_signals)
        self.sub_prob_text_box.blockSignals(block_signals)
        self.sub_ins_mut_text_box.blockSignals(block_signals)
        self.sub_del_start_text_box.blockSignals(block_signals)
        self.sub_del_nts_text_box.blockSignals(block_signals)

        self.site_chr_text_box.blockSignals(True)
        if self.site_chr_text_box.text()=='':
            self.set_text_box_state(self.site_chr_text_box, False, "No Input Chromosome")
        else:
            self.set_text_box_state(self.site_chr_text_box, True, "")
        self.site_chr_text_box.blockSignals(False)

        if self.manual_mut_radio.isChecked():
            self.N_muts_text_box.setText('')
            self.N_muts_text_box.setEnabled(False)
            self.set_text_box_state(self.N_muts_text_box, True, "")
            self.site_strand_text_box.setText('')
            self.site_strand_text_box.setEnabled(False)
            self.set_text_box_state(self.site_strand_text_box, True, "")
            self.target_seq_text_box.setText('')
            self.target_seq_text_box.setEnabled(False)
            self.set_text_box_state(self.target_seq_text_box, True, "")
            self.site_start_pos_text_box.setText('')
            self.site_start_pos_text_box.setEnabled(False)
            self.set_text_box_state(self.site_start_pos_text_box, True, "")
            self.ins_prob_text_box.setText('0')
            self.del_prob_text_box.setText('0')
            self.sub_prob_text_box.setText('0')
        else:
            self.N_muts_text_box.setText('4')
            self.N_muts_text_box.setEnabled(True)
            self.site_strand_text_box.setEnabled(True)
            self.site_start_pos_text_box.setEnabled(True)
            self.target_seq_text_box.setEnabled(True)
            self.ins_prob_text_box.setText('')
            self.del_prob_text_box.setText('')
            self.sub_prob_text_box.setText('')
            self.set_text_box_state(self.ins_prob_text_box, True, "")
            self.set_text_box_state(self.del_prob_text_box, True, "")
            self.set_text_box_state(self.sub_prob_text_box, True, "")
            self.set_text_box_state(self.ins_mut_text_box, True, "")
            self.set_text_box_state(self.ins_pos_text_box, True, "")
            self.set_text_box_state(self.del_del_start_text_box, True, "")
            self.set_text_box_state(self.del_del_nts_text_box, True, "")
            self.set_text_box_state(self.sub_ins_mut_text_box, True, "")
            self.set_text_box_state(self.sub_del_start_text_box, True, "")
            self.set_text_box_state(self.sub_del_nts_text_box, True, "")
            enable_mut_textboxes = False
            self.ins_prob_text_box.setEnabled(enable_mut_textboxes)
            self.del_prob_text_box.setEnabled(enable_mut_textboxes)
            self.sub_prob_text_box.setEnabled(enable_mut_textboxes)
            self.ins_mut_text_box.setEnabled(enable_mut_textboxes)
            self.ins_pos_text_box.setEnabled(enable_mut_textboxes)
            self.del_del_start_text_box.setEnabled(enable_mut_textboxes)
            self.del_del_nts_text_box.setEnabled(enable_mut_textboxes)
            self.sub_ins_mut_text_box.setEnabled(enable_mut_textboxes)
            self.sub_del_start_text_box.setEnabled(enable_mut_textboxes)
            self.sub_del_nts_text_box.setEnabled(enable_mut_textboxes)


        self.ins_mut_text_box.setText('')
        self.ins_pos_text_box.setText('')
        self.del_del_start_text_box.setText('')
        self.del_del_nts_text_box.setText('')
        self.sub_ins_mut_text_box.setText('')
        self.sub_del_start_text_box.setText('')
        self.sub_del_nts_text_box.setText('')

        block_signals = False
        self.N_muts_text_box.blockSignals(block_signals)
        self.target_seq_text_box.blockSignals(block_signals)
        self.site_strand_text_box.blockSignals(block_signals)
        self.site_start_pos_text_box.blockSignals(block_signals)
        self.manual_mut_radio.blockSignals(block_signals)
        self.mut_pred_radio.blockSignals(block_signals)
        self.ins_prob_text_box.blockSignals(block_signals)
        self.ins_mut_text_box.blockSignals(block_signals)
        self.ins_pos_text_box.blockSignals(block_signals)
        self.del_prob_text_box.blockSignals(block_signals)
        self.del_del_start_text_box.blockSignals(block_signals)
        self.del_del_nts_text_box.blockSignals(block_signals)
        self.sub_prob_text_box.blockSignals(block_signals)
        self.sub_ins_mut_text_box.blockSignals(block_signals)
        self.sub_del_start_text_box.blockSignals(block_signals)
        self.sub_del_nts_text_box.blockSignals(block_signals)

    # def use_mut_pred_clicked(self):
    #     block_signals = True
    #     self.ins_prob_text_box.blockSignals(block_signals)
    #     self.ins_mut_text_box.blockSignals(block_signals)
    #     self.del_prob_text_box.blockSignals(block_signals)
    #     self.del_del_start_text_box.blockSignals(block_signals)
    #     self.del_del_nts_text_box.blockSignals(block_signals)
    #     self.sub_prob_text_box.blockSignals(block_signals)
    #     self.sub_ins_mut_text_box.blockSignals(block_signals)
    #     self.sub_del_start_text_box.blockSignals(block_signals)
    #     self.sub_del_nts_text_box.blockSignals(block_signals)
    #     self.ins_prob_text_box.setText('')
    #     self.ins_mut_text_box.setText('')
    #     self.del_prob_text_box.setText('')
    #     self.del_del_start_text_box.setText('')
    #     self.del_del_nts_text_box.setText('')
    #     self.sub_prob_text_box.setText('')
    #     self.sub_ins_mut_text_box.setText('')
    #     self.sub_del_start_text_box.setText('')
    #     self.sub_del_nts_text_box.setText('')
    #     block_signals = False
    #     self.ins_prob_text_box.blockSignals(block_signals)
    #     self.ins_mut_text_box.blockSignals(block_signals)
    #     self.del_prob_text_box.blockSignals(block_signals)
    #     self.del_del_start_text_box.blockSignals(block_signals)
    #     self.del_del_nts_text_box.blockSignals(block_signals)
    #     self.sub_prob_text_box.blockSignals(block_signals)
    #     self.sub_ins_mut_text_box.blockSignals(block_signals)
    #     self.sub_del_start_text_box.blockSignals(block_signals)
    #     self.sub_del_nts_text_box.blockSignals(block_signals)

    #check_here
    def are_mut_params_vaild(self):
        use_man_muts = self.manual_mut_radio.isChecked()
        block_signals = True
        self.N_muts_text_box.blockSignals(block_signals)
        self.ins_prob_text_box.blockSignals(block_signals)
        self.ins_mut_text_box.blockSignals(block_signals)
        self.ins_pos_text_box.blockSignals(block_signals)
        self.del_prob_text_box.blockSignals(block_signals)
        self.del_del_start_text_box.blockSignals(block_signals)
        self.del_del_nts_text_box.blockSignals(block_signals)
        self.sub_prob_text_box.blockSignals(block_signals)
        self.sub_ins_mut_text_box.blockSignals(block_signals)
        self.sub_del_start_text_box.blockSignals(block_signals)
        self.sub_del_nts_text_box.blockSignals(block_signals)

        INS_prob = self.ins_prob_text_box.text()
        DEL_prob = self.del_prob_text_box.text()
        SUB_prob = self.sub_prob_text_box.text()
        # self.are_curr_mut_textboxes_valid(SUB_prob,use_man_muts)
        self.set_text_box_state(self.ins_prob_text_box,
                                [len(INS_prob) > 0 if use_man_muts else True][0] and
                                [self.ins_prob_text_box.text()[-1]!='/' if len(self.ins_prob_text_box.text())>0 else True][0],
                                "Not All Mutation Parameters have been filled manually!")
        if (len(INS_prob)!=0 and  ('/' not in INS_prob))  \
            and (float(INS_prob) == 0 or not use_man_muts):
            self.ins_mut_text_box.setEnabled(False)
            self.ins_mut_text_box.setText('')
            self.ins_pos_text_box.setEnabled(False)
            self.ins_pos_text_box.setText('')
            self.set_text_box_state(self.ins_mut_text_box,True,"")
            self.set_text_box_state(self.ins_pos_text_box,True,"")

        else:
            self.ins_mut_text_box.setEnabled(True)
            self.ins_pos_text_box.setEnabled(True)

            self.set_text_box_state(self.ins_mut_text_box,
                                    len(self.ins_mut_text_box.text()) > 0 and self.ins_mut_text_box.text()[-1]!='/',
                                    "Not All Mutation Parameters have been filled manually!")
            self.set_text_box_state(self.ins_pos_text_box,
                                    len(self.ins_pos_text_box.text()) > 0 and self.ins_pos_text_box.text()[-1]!='/',
                                    "Not All Mutation Parameters have been filled manually!")

        self.set_text_box_state(self.del_prob_text_box,[len(self.del_prob_text_box.text())>0 if use_man_muts else True][0] and
                                [self.del_prob_text_box.text()[-1]!='/' if len(self.del_prob_text_box.text())>0 else True][0],
            "Not All Mutation Parameters have been filled manually!")
        if (len(DEL_prob)!=0 and ('/' not in DEL_prob)) \
                and (float(DEL_prob) == 0 or not use_man_muts):
            self.del_del_start_text_box.setEnabled(False)
            self.del_del_nts_text_box.setEnabled(False)
            self.del_del_start_text_box.setText('')
            self.del_del_nts_text_box.setText('')
            self.set_text_box_state(self.del_del_start_text_box,True,"")
            self.set_text_box_state(self.del_del_nts_text_box,True,"")

        else:
            self.del_del_start_text_box.setEnabled(True)
            self.del_del_nts_text_box.setEnabled(True)
            self.set_text_box_state(self.del_del_start_text_box,
                                    len(self.del_del_start_text_box.text()) > 0 and
                                    [self.del_del_start_text_box.text()[-1]!='/' if len(self.del_del_start_text_box.text())>0 else True][0],
                                    "Not All Mutation Parameters have been filled manually!")
            self.set_text_box_state(self.del_del_nts_text_box,
                                    len(self.del_del_nts_text_box.text()) > 0 and
                                    [self.del_del_nts_text_box.text()[-1] != '/' if len(self.del_del_nts_text_box.text()) > 0 else True][0],
                                    "Not All Mutation Parameters have been filled manually!")

        self.set_text_box_state(self.sub_prob_text_box,[len(self.sub_prob_text_box.text())>0 if use_man_muts else True][0] and
                                [self.sub_prob_text_box.text()[-1] != '/' if len(self.sub_prob_text_box.text()) > 0 else True][0],
                                  "Not All Mutation Parameters have been filled manually!")
        if (len(SUB_prob) != 0 and ('/' not in SUB_prob)) \
                and (float(SUB_prob) == 0 or not use_man_muts):
            self.sub_del_start_text_box.setEnabled(False)
            self.sub_del_nts_text_box.setEnabled(False)
            self.sub_ins_mut_text_box.setEnabled(False)
            self.sub_ins_mut_text_box.setText('')
            self.sub_del_start_text_box.setText('')
            self.sub_del_nts_text_box.setText('')
            self.set_text_box_state(self.sub_ins_mut_text_box,True,"")
            self.set_text_box_state(self.sub_del_start_text_box,True,"")
            self.set_text_box_state(self.sub_del_nts_text_box,True,"")

        else:
            self.sub_del_start_text_box.setEnabled(True)
            self.sub_del_nts_text_box.setEnabled(True)
            self.sub_ins_mut_text_box.setEnabled(True)
            self.set_text_box_state(self.sub_ins_mut_text_box,
                                    len(self.sub_ins_mut_text_box.text()) > 0 and
                                    [self.sub_ins_mut_text_box.text()[-1] != '/' if len(
                                        self.sub_ins_mut_text_box.text()) > 0 else True][0],
                                    "Not All Mutation Parameters have been filled manually!")
            self.set_text_box_state(self.sub_del_start_text_box,
                                    len(self.sub_del_start_text_box.text()) > 0 and
                                    [self.sub_del_start_text_box.text()[-1] != '/' if len(
                                        self.sub_del_start_text_box.text()) > 0 else True][0],
                                    "Not All Mutation Parameters have been filled manually!")
            self.set_text_box_state(self.sub_del_nts_text_box,
                                    len(self.sub_del_nts_text_box.text()) > 0 and
                                    [self.sub_del_nts_text_box.text()[-1] != '/' if len(self.sub_del_nts_text_box.text()) > 0 else True][0],
                                    "Not All Mutation Parameters have been filled manually!")
        block_signals = False
        self.N_muts_text_box.blockSignals(block_signals)
        self.ins_prob_text_box.blockSignals(block_signals)
        self.ins_mut_text_box.blockSignals(block_signals)
        self.ins_pos_text_box.blockSignals(block_signals)
        self.del_prob_text_box.blockSignals(block_signals)
        self.del_del_start_text_box.blockSignals(block_signals)
        self.del_del_nts_text_box.blockSignals(block_signals)
        self.sub_prob_text_box.blockSignals(block_signals)
        self.sub_ins_mut_text_box.blockSignals(block_signals)
        self.sub_del_start_text_box.blockSignals(block_signals)
        self.sub_del_nts_text_box.blockSignals(block_signals)


    def _enforce_gene_symbol(self):
        text = self.gene_symbol_text_box.text() # Prevent recursive calls to this method.
        self.gene_symbol_text_box.blockSignals(True)
        self.ensmbl_id_text_box.blockSignals(True)
        self.site_chr_text_box.blockSignals(True)
        if text == 'No Interest Gene':
            self.site_chr_text_box.setEnabled(True)
        else:
            self.site_chr_text_box.setEnabled(False)
            if text in GENE_SYMBOLS:
                curr_chr_of_selected_gene = genes_df[genes_df['gene']==text].chrm.values[0][3:]
                self.site_chr_text_box.setText(curr_chr_of_selected_gene)
                self.site_chr_text_box.setEnabled(False)
                self.set_text_box_state(self.site_chr_text_box, True, "")
                curr_transcripts = transcripts_df[(transcripts_df['gene'] == text) | (transcripts_df['ID']=='No Interest Transcript')]
                if curr_transcripts.empty:
                    self.ensmbl_id_text_box.setCompleter(QtWidgets.QCompleter(ENSMBL_IDS))
                else:
                    self.ensmbl_id_text_box.setCompleter(QtWidgets.QCompleter(curr_transcripts['ID'].values))
            else:
                self.ensmbl_id_text_box.setCompleter(QtWidgets.QCompleter(ENSMBL_IDS))
        self.gene_symbol_text_box.blockSignals(False)
        self.ensmbl_id_text_box.blockSignals(False)
        self.site_chr_text_box.blockSignals(False)
        self.set_text_box_state(self.gene_symbol_text_box, text in GENE_SYMBOLS,
            "Value expected to be a Gene Symbol")
        self.set_text_box_state(self.ensmbl_id_text_box, self.ensmbl_id_text_box.text() in ENSMBL_IDS,
            "Value expected to be an ENSMBL ID")

    def _enforce_ensmbl_id(self):
        text = self.ensmbl_id_text_box.text()
        self.ensmbl_id_text_box.blockSignals(True) # Prevent recursive calls to this method.
        self.gene_symbol_text_box.blockSignals(True) # Prevent recursive calls to this method.
        self.site_chr_text_box.blockSignals(True)
        if text in ENSMBL_IDS and text!='No Interest Transcript':
            curr_gene_df = transcripts_df[transcripts_df['ID'] == text]
            gene_text = curr_gene_df.gene.values[0]
            self.gene_symbol_text_box.setText(gene_text)
            self.gene_symbol_text_box.setEnabled(False)
            chr_text = curr_gene_df.chrm.values[0][3:]
            self.site_chr_text_box.setText(chr_text)
            self.site_chr_text_box.setEnabled(False)
            self.set_text_box_state(self.site_chr_text_box, True, "")
        else:
            self.gene_symbol_text_box.setEnabled(True)
            self.site_chr_text_box.setEnabled(True)
            gene_text = self.gene_symbol_text_box.text()
            if gene_text in GENE_SYMBOLS and gene_text!='No Interest Gene':
                curr_chr_of_selected_gene = genes_df[genes_df['gene'] == gene_text].chrm.values[0][3:]
                self.site_chr_text_box.setText(curr_chr_of_selected_gene)
                self.set_text_box_state(self.site_chr_text_box, True, "")
                curr_transcripts = transcripts_df[transcripts_df['gene'] == gene_text]
                if curr_transcripts.empty:
                    self.ensmbl_id_text_box.setCompleter(QtWidgets.QCompleter(ENSMBL_IDS))
                elif text!='No Interest Transcript'[:len(text)]:
                    curr_transcripts = transcripts_df[(transcripts_df['gene'] == gene_text) | (transcripts_df['ID'] == 'No Interest Transcript')]
                    self.ensmbl_id_text_box.setCompleter(QtWidgets.QCompleter(curr_transcripts['ID'].values))
            elif text!='No Interest Transcript'[:len(text)]:
                self.ensmbl_id_text_box.setCompleter(QtWidgets.QCompleter(ENSMBL_IDS))
        self.ensmbl_id_text_box.blockSignals(False)
        self.gene_symbol_text_box.blockSignals(False) # Prevent recursive calls to this method.
        self.site_chr_text_box.blockSignals(False)
        self.set_text_box_state(self.ensmbl_id_text_box, text in ENSMBL_IDS,
            "Value expected to be an ENSMBL ID")
        self.set_text_box_state(self.gene_symbol_text_box, self.gene_symbol_text_box.text() in GENE_SYMBOLS,
            "Value expected to be a Gene Symbol")

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1050, 900)
        MainWindow.setMinimumSize(QtCore.QSize(940, 640))
        MainWindow.setBaseSize(QtCore.QSize(1050, 900))
        large_text_box_height = 30
        large_text_box_width = 250
        small_text_box_width = 60
        small_text_box_height = 30
        medium_text_box_width = round(small_text_box_width*2/1.2)
        medium_text_box_height = 30
        self.validated_text_boxes = {}
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.formLayout_7 = QtWidgets.QFormLayout()
        self.formLayout_7.setObjectName("formLayout_7")
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setFieldGrowthPolicy(QtWidgets.QFormLayout.FieldsStayAtSizeHint)
        self.formLayout.setObjectName("formLayout")
        self.transcription_check_box = QtWidgets.QCheckBox(self.centralwidget)
        self.transcription_check_box.setChecked(True)
        self.transcription_check_box.setObjectName("transcription_check_box")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.transcription_check_box)
        self.splicing_check_box = QtWidgets.QCheckBox(self.centralwidget)
        self.splicing_check_box.setChecked(True)
        self.splicing_check_box.setObjectName("splicing_check_box")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.splicing_check_box)
        self.init_check_box = QtWidgets.QCheckBox(self.centralwidget)
        self.init_check_box.setChecked(True)
        self.init_check_box.setObjectName("init_check_box")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.init_check_box)
        self.adj_genes_info_check_box = QtWidgets.QCheckBox(self.centralwidget)
        self.adj_genes_info_check_box.setChecked(False)
        self.adj_genes_info_check_box.setObjectName("adj_genes_info_check_box")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.adj_genes_info_check_box)
        self.save_results_csv_check_box = QtWidgets.QCheckBox(self.centralwidget)
        self.save_results_csv_check_box.setChecked(True)
        self.save_results_csv_check_box.setObjectName("save_results_csv_check_box")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.save_results_csv_check_box)
        self.gridLayout_3.addLayout(self.formLayout, 0, 0, 1, 1)

        self.formLayout_2 = QtWidgets.QFormLayout()
        self.formLayout_2.setObjectName("formLayout_2")
        self.label_gene_symbol = QtWidgets.QLabel(self.centralwidget)
        self.label_gene_symbol.setObjectName("label_gene_symbol")
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_gene_symbol)

        self.gene_symbol_text_box = QtWidgets.QLineEdit(self.centralwidget)
        self.gene_symbol_text_box.setMinimumSize(QtCore.QSize(large_text_box_width, large_text_box_height))
        self.gene_symbol_text_box.setMaximumSize(QtCore.QSize(large_text_box_width, large_text_box_height))
        self.gene_symbol_text_box.setObjectName("gene_symbol_text_box")
        self.gene_symbol_text_box.setCompleter(QtWidgets.QCompleter(GENE_SYMBOLS))
        self.gene_symbol_text_box.textChanged.connect(self._enforce_gene_symbol)
        self.validated_text_boxes[self.gene_symbol_text_box.objectName()] = True
        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.gene_symbol_text_box)

        self.label_ensembl_id = QtWidgets.QLabel(self.centralwidget)
        self.label_ensembl_id.setObjectName("label_ensembl_id")
        # self.label_ensembl_id.setAlignment(QtCore.Qt.AlignHCenter)
        self.formLayout_2.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_ensembl_id)

        self.ensmbl_id_text_box = QtWidgets.QLineEdit(self.centralwidget)
        self.ensmbl_id_text_box.setMinimumSize(QtCore.QSize(large_text_box_width, large_text_box_height))
        self.ensmbl_id_text_box.setMaximumSize(QtCore.QSize(large_text_box_width, large_text_box_height))
        self.ensmbl_id_text_box.setObjectName("ensmbl_id_text_box")
        self.ensmbl_id_text_box.textChanged.connect(self._enforce_ensmbl_id)
        self.ensmbl_id_text_box.setCompleter(QtWidgets.QCompleter(ENSMBL_IDS))
        self.validated_text_boxes[self.ensmbl_id_text_box.objectName()] = True
        self.formLayout_2.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.ensmbl_id_text_box)

        self.label_target_seq = QtWidgets.QLabel(self.centralwidget)
        self.label_target_seq.setObjectName("label_target_seq")
        # self.label_ensembl_id.setAlignment(QtCore.Qt.AlignHCenter)
        self.formLayout_2.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.label_target_seq)

        self.target_seq_text_box = QtWidgets.QLineEdit(self.centralwidget)
        self.target_seq_text_box.setMinimumSize(QtCore.QSize(large_text_box_width, large_text_box_height))
        self.target_seq_text_box.setMaximumSize(QtCore.QSize(large_text_box_width, large_text_box_height))
        self.target_seq_text_box.setObjectName("target_seq_text_box")
        self.target_seq_text_box.textChanged.connect(self.is_target_seq_valid)
        # self.add_mut_validator(self.target_seq_text_box)

        self.validated_text_boxes[self.target_seq_text_box.objectName()] = False
        self.formLayout_2.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.target_seq_text_box)

        self.label_site_start = QtWidgets.QLabel(self.centralwidget)
        self.label_site_start.setObjectName("label_site_start")
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.label_site_start)

        self.site_start_pos_text_box = QtWidgets.QLineEdit(self.centralwidget)
        self.site_start_pos_text_box.setMinimumSize(QtCore.QSize(round(large_text_box_width * 0.5), large_text_box_height))
        self.site_start_pos_text_box.setMaximumSize(QtCore.QSize(round(large_text_box_width * 0.5), large_text_box_height))
        self.site_start_pos_text_box.setText("")
        self.site_start_pos_text_box.setObjectName("site_start_pos_text_box")
        self.add_int_validator(self.site_start_pos_text_box)
        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.site_start_pos_text_box)

        self.label_site_strand = QtWidgets.QLabel(self.centralwidget)
        self.label_site_strand.setObjectName("label_site_strand")
        # self.label_site_strand.setAlignment(QtCore.Qt.AlignHCenter)
        self.formLayout_2.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.label_site_strand)

        self.site_strand_text_box = QtWidgets.QLineEdit(self.centralwidget)
        self.site_strand_text_box.setObjectName("site_strand_text_box")
        self.site_strand_text_box.setMinimumSize(QtCore.QSize(small_text_box_width, large_text_box_height))
        self.site_strand_text_box.setMaximumSize(QtCore.QSize(small_text_box_width, large_text_box_height))
        self.add_strand_validator(self.site_strand_text_box)
        # self.is_strand_valid(self.site_strand_text_box)

        self.formLayout_2.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.site_strand_text_box)

        self.label_site_chr = QtWidgets.QLabel(self.centralwidget)
        self.label_site_chr.setObjectName("label_site_chr")
        self.formLayout_2.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.label_site_chr)

        self.site_chr_text_box = QtWidgets.QLineEdit(self.centralwidget)
        self.site_chr_text_box.setObjectName("site_chr_text_box")
        self.site_chr_text_box.setMinimumSize(QtCore.QSize(small_text_box_width, large_text_box_height))
        self.site_chr_text_box.setMaximumSize(QtCore.QSize(small_text_box_width, large_text_box_height))
        self.add_chr_validator(self.site_chr_text_box)
        self.formLayout_2.setWidget(5, QtWidgets.QFormLayout.FieldRole, self.site_chr_text_box)

        self.gridLayout_3.addLayout(self.formLayout_2, 0, 1, 1, 1)
        self.formLayout_7.setLayout(0, QtWidgets.QFormLayout.LabelRole, self.gridLayout_3)

        self.analyze_button = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.analyze_button.sizePolicy().hasHeightForWidth())
        self.analyze_button.setSizePolicy(sizePolicy)
        self.analyze_button.setMinimumSize(QtCore.QSize(80, 52))
        self.analyze_button.setMaximumSize(QtCore.QSize(80, 52))
        self.analyze_button.setObjectName("analyze_button")
        self.analyze_button.clicked.connect(lambda x: self._analyze(self._get_current_gui_config()))
        self.formLayout_7.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.analyze_button)
        self.gridLayout_5.addLayout(self.formLayout_7, 0, 0, 1, 2)
        self.mut_params_groupBox = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(30)
        sizePolicy.setHeightForWidth(self.mut_params_groupBox.sizePolicy().hasHeightForWidth())

        #mutation parameters
        self.mut_params_groupBox.setSizePolicy(sizePolicy)
        mut_params_group_x_pos = 10
        mut_params_group_y_pos = 30
        mut_params_group_height = 300
        mut_params_group_width = 500
        mut_params_grid_x_pos = 10
        mut_params_grid_y_pos = 45
        mut_params_grid_height = 240
        mut_params_grid_width = 451
        self.mut_params_groupBox.setMinimumSize(QtCore.QSize(mut_params_group_width, mut_params_group_height))
        self.mut_params_groupBox.setMaximumSize(QtCore.QSize(mut_params_group_width, mut_params_group_height))
        self.mut_params_groupBox.setGeometry(QtCore.QRect(mut_params_group_x_pos,mut_params_group_y_pos,mut_params_group_width,mut_params_group_height))
        self.mut_params_groupBox.setObjectName("mut_params_groupBox")
        self.layoutWidget = QtWidgets.QWidget(self.mut_params_groupBox)
        self.layoutWidget.setGeometry(QtCore.QRect(mut_params_grid_x_pos, mut_params_grid_y_pos, mut_params_grid_width, mut_params_grid_height))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        #self.gridLayout.geometry()

        # 1st col (from left)

        self.label_N_muts = QtWidgets.QLabel(self.layoutWidget)
        self.label_N_muts.setObjectName("label_N_muts")
        self.label_N_muts.setAlignment(QtCore.Qt.AlignHCenter)
        self.gridLayout.addWidget(self.label_N_muts, 0, 0, 1, 1)

        self.label_INS = QtWidgets.QLabel(self.layoutWidget)
        self.label_INS.setObjectName("label_INS")
        self.label_INS.setAlignment(QtCore.Qt.AlignHCenter)
        self.gridLayout.addWidget(self.label_INS, 2, 0, 1, 1)
        self.label_DEL = QtWidgets.QLabel(self.layoutWidget)
        self.label_DEL.setObjectName("label_DEL")
        self.label_DEL.setAlignment(QtCore.Qt.AlignHCenter)
        self.gridLayout.addWidget(self.label_DEL, 4, 0, 1, 1)
        self.label_SUB = QtWidgets.QLabel(self.layoutWidget)
        self.label_SUB.setObjectName("label_SUB")
        self.label_SUB.setAlignment(QtCore.Qt.AlignHCenter)
        self.gridLayout.addWidget(self.label_SUB, 6, 0, 1, 1)
        # END 1st col
        # 2nd col (from left)
        self.N_muts_text_box = QtWidgets.QLineEdit(self.layoutWidget)
        self.N_muts_text_box.setMinimumSize(QtCore.QSize(small_text_box_width, small_text_box_height))
        self.N_muts_text_box.setMaximumSize(QtCore.QSize(small_text_box_width, small_text_box_height))
        self.N_muts_text_box.setObjectName("N_muts_text_box")
        self.N_muts_text_box.setEnabled(True)
        # self.N_muts_text_box.textChanged.connect(self.are_mut_params_vaild)
        self.add_pos_int_validator(self.N_muts_text_box)
        self.gridLayout.addWidget(self.N_muts_text_box, 0, 1, 1, 1)

        self.label_INS_prob = QtWidgets.QLabel(self.layoutWidget)
        self.label_INS_prob.setObjectName("label_INS_prob")
        self.label_INS_prob.setAlignment(QtCore.Qt.AlignHCenter)
        self.gridLayout.addWidget(self.label_INS_prob, 1, 1, 1, 1)
        self.ins_prob_text_box = QtWidgets.QLineEdit(self.layoutWidget)
        self.ins_prob_text_box.setMinimumSize(QtCore.QSize(small_text_box_width, small_text_box_height))
        self.ins_prob_text_box.setMaximumSize(QtCore.QSize(small_text_box_width, small_text_box_height))
        self.ins_prob_text_box.setObjectName("ins_prob_text_box")
        self.ins_prob_text_box.setEnabled(False)
        self.ins_prob_text_box.textChanged.connect(self.are_mut_params_vaild)
        self.add_double_validator_zero_to_one(self.ins_prob_text_box)
        self.gridLayout.addWidget(self.ins_prob_text_box, 2, 1, 1, 1)

        self.label_DEL_prob = QtWidgets.QLabel(self.layoutWidget)
        self.label_DEL_prob.setObjectName("label_DEL_prob")
        self.label_DEL_prob.setAlignment(QtCore.Qt.AlignHCenter)
        self.gridLayout.addWidget(self.label_DEL_prob, 3, 1, 1, 1)
        self.del_prob_text_box = QtWidgets.QLineEdit(self.layoutWidget)
        self.del_prob_text_box.setObjectName("del_prob_text_box")
        self.del_prob_text_box.setEnabled(False)
        self.del_prob_text_box.setMinimumSize(QtCore.QSize(small_text_box_width, small_text_box_height))
        self.del_prob_text_box.setMaximumSize(QtCore.QSize(small_text_box_width, small_text_box_height))
        self.del_prob_text_box.textChanged.connect(self.are_mut_params_vaild)
        self.add_double_validator_zero_to_one(self.del_prob_text_box)
        self.gridLayout.addWidget(self.del_prob_text_box, 4, 1, 1, 1)

        self.label_SUB_prob = QtWidgets.QLabel(self.layoutWidget)
        self.label_SUB_prob.setObjectName("label_SUB_prob")
        self.label_SUB_prob.setAlignment(QtCore.Qt.AlignHCenter)
        self.gridLayout.addWidget(self.label_SUB_prob, 5, 1, 1, 1)
        self.sub_prob_text_box = QtWidgets.QLineEdit(self.layoutWidget)
        self.sub_prob_text_box.setObjectName("sub_prob_text_box")
        self.sub_prob_text_box.setEnabled(False)
        self.sub_prob_text_box.setMinimumSize(QtCore.QSize(small_text_box_width, small_text_box_height))
        self.sub_prob_text_box.setMaximumSize(QtCore.QSize(small_text_box_width, small_text_box_height))
        self.sub_prob_text_box.textChanged.connect(self.are_mut_params_vaild)
        self.add_double_validator_zero_to_one(self.sub_prob_text_box)
        self.gridLayout.addWidget(self.sub_prob_text_box, 6, 1, 1, 1)
        #END 2nd col
        #3rd col
        self.label_INS_pred_nts = QtWidgets.QLabel(self.layoutWidget)
        self.label_INS_pred_nts.setObjectName("label_INS_pred_nts")
        self.label_INS_pred_nts.setAlignment(QtCore.Qt.AlignHCenter)
        self.gridLayout.addWidget(self.label_INS_pred_nts, 1, 2, 1, 1)
        self.ins_mut_text_box = QtWidgets.QLineEdit(self.layoutWidget)
        self.ins_mut_text_box.setObjectName("ins_mut_text_box")
        self.ins_mut_text_box.setEnabled(False)
        self.ins_mut_text_box.setMinimumSize(QtCore.QSize(medium_text_box_width, medium_text_box_height))
        self.ins_mut_text_box.setMaximumSize(QtCore.QSize(medium_text_box_width, medium_text_box_height))
        self.ins_mut_text_box.textChanged.connect(self.are_mut_params_vaild)
        self.add_mut_validator(self.ins_mut_text_box)
        self.gridLayout.addWidget(self.ins_mut_text_box, 2, 2, 1, 1)

        self.label_DEL_del_start = QtWidgets.QLabel(self.layoutWidget)
        self.label_DEL_del_start.setObjectName("label_DEL_del_start")
        self.label_DEL_del_start.setAlignment(QtCore.Qt.AlignHCenter)
        self.gridLayout.addWidget(self.label_DEL_del_start, 3, 2, 1, 1)
        self.del_del_start_text_box = QtWidgets.QLineEdit(self.layoutWidget)
        self.del_del_start_text_box.setObjectName("del_del_start_text_box")
        self.del_del_start_text_box.setEnabled(False)
        self.del_del_start_text_box.setValidator(QtGui.QIntValidator())
        self.del_del_start_text_box.setMinimumSize(QtCore.QSize(medium_text_box_width, medium_text_box_height))
        self.del_del_start_text_box.setMaximumSize(QtCore.QSize(medium_text_box_width, medium_text_box_height))
        self.del_del_start_text_box.textChanged.connect(self.are_mut_params_vaild)
        self.add_int_validator(self.del_del_start_text_box)
        self.gridLayout.addWidget(self.del_del_start_text_box, 4, 2, 1, 1)

        self.label_SUB_del_start = QtWidgets.QLabel(self.layoutWidget)
        self.label_SUB_del_start.setObjectName("label_SUB_del_start")
        self.label_SUB_del_start.setAlignment(QtCore.Qt.AlignHCenter)
        self.gridLayout.addWidget(self.label_SUB_del_start, 5, 2, 1, 1)
        self.sub_del_start_text_box = QtWidgets.QLineEdit(self.layoutWidget)
        self.sub_del_start_text_box.setObjectName("sub_del_start_text_box")
        self.sub_del_start_text_box.setEnabled(False)
        self.sub_del_start_text_box.setMinimumSize(QtCore.QSize(medium_text_box_width, medium_text_box_height))
        self.sub_del_start_text_box.setMaximumSize(QtCore.QSize(medium_text_box_width, medium_text_box_height))
        self.sub_del_start_text_box.textChanged.connect(self.are_mut_params_vaild)
        self.add_int_validator(self.sub_del_start_text_box)
        self.gridLayout.addWidget(self.sub_del_start_text_box, 6, 2, 1, 1)
        #END 3rd col
        #4th col
        self.label_INS_ins_pos = QtWidgets.QLabel(self.layoutWidget)
        self.label_INS_ins_pos.setObjectName("label_INS_ins_pos")
        self.label_INS_ins_pos.setAlignment(QtCore.Qt.AlignHCenter)
        self.gridLayout.addWidget(self.label_INS_ins_pos, 1, 3, 1, 1)
        self.ins_pos_text_box = QtWidgets.QLineEdit(self.layoutWidget)
        self.ins_pos_text_box.setObjectName("ins_mut_text_box")
        self.ins_pos_text_box.setEnabled(False)
        self.ins_pos_text_box.setMinimumSize(QtCore.QSize(medium_text_box_width, medium_text_box_height))
        self.ins_pos_text_box.setMaximumSize(QtCore.QSize(medium_text_box_width, medium_text_box_height))
        self.ins_pos_text_box.textChanged.connect(self.are_mut_params_vaild)
        self.add_pos_int_validator(self.ins_pos_text_box)
        self.gridLayout.addWidget(self.ins_pos_text_box, 2, 3, 1, 1)
        self.label_DEL_del_nts = QtWidgets.QLabel(self.layoutWidget)
        self.label_DEL_del_nts.setObjectName("label_DEL_del_nts")
        self.label_DEL_del_nts.setAlignment(QtCore.Qt.AlignHCenter)
        self.gridLayout.addWidget(self.label_DEL_del_nts, 3, 3, 1, 1)
        self.del_del_nts_text_box = QtWidgets.QLineEdit(self.layoutWidget)
        self.del_del_nts_text_box.setObjectName("del_del_nts_text_box")
        self.del_del_nts_text_box.setEnabled(False)
        self.del_del_nts_text_box.setMinimumSize(QtCore.QSize(medium_text_box_width, medium_text_box_height))
        self.del_del_nts_text_box.setMaximumSize(QtCore.QSize(medium_text_box_width, medium_text_box_height))
        self.del_del_nts_text_box.textChanged.connect(self.are_mut_params_vaild)
        self.add_mut_validator(self.del_del_nts_text_box)
        self.gridLayout.addWidget(self.del_del_nts_text_box, 4, 3, 1, 1)

        self.label_SUB_del_nts = QtWidgets.QLabel(self.layoutWidget)
        self.label_SUB_del_nts.setObjectName("label_SUB_del_nts")
        self.label_SUB_del_nts.setAlignment(QtCore.Qt.AlignHCenter)
        self.gridLayout.addWidget(self.label_SUB_del_nts, 5, 3, 1, 1)
        self.sub_del_nts_text_box = QtWidgets.QLineEdit(self.layoutWidget)
        self.sub_del_nts_text_box.setObjectName("sub_del_nts_text_box")
        self.sub_del_nts_text_box.setEnabled(False)
        self.sub_del_nts_text_box.setMinimumSize(QtCore.QSize(medium_text_box_width, medium_text_box_height))
        self.sub_del_nts_text_box.setMaximumSize(QtCore.QSize(medium_text_box_width, medium_text_box_height))
        self.sub_del_nts_text_box.textChanged.connect(self.are_mut_params_vaild)
        self.add_mut_validator(self.sub_del_nts_text_box)
        self.gridLayout.addWidget(self.sub_del_nts_text_box, 6, 3, 1, 1)
        #END 4th col
        #5th col
        self.label_SUB_pred_nts = QtWidgets.QLabel(self.layoutWidget)
        self.label_SUB_pred_nts.setObjectName("label_SUB_pred_nts")
        self.label_SUB_pred_nts.setAlignment(QtCore.Qt.AlignHCenter)
        self.gridLayout.addWidget(self.label_SUB_pred_nts, 5, 4, 1, 1)
        self.sub_ins_mut_text_box = QtWidgets.QLineEdit(self.layoutWidget)
        self.sub_ins_mut_text_box.setObjectName("sub_ins_mut_text_box")
        self.sub_ins_mut_text_box.setEnabled(False)
        self.sub_ins_mut_text_box.setMinimumSize(QtCore.QSize(medium_text_box_width, medium_text_box_height))
        self.sub_ins_mut_text_box.setMaximumSize(QtCore.QSize(medium_text_box_width, medium_text_box_height))
        self.sub_ins_mut_text_box.textChanged.connect(self.are_mut_params_vaild)
        self.add_mut_validator(self.sub_ins_mut_text_box)
        self.gridLayout.addWidget(self.sub_ins_mut_text_box, 6, 4, 1, 1)



        self.layoutWidget_4 = QtWidgets.QWidget(self.mut_params_groupBox)
        self.layoutWidget_4.setGeometry(QtCore.QRect(mut_params_grid_x_pos+350, mut_params_grid_y_pos-10, 150, 50))
        # self.layoutWidget_4.setGeometry(QtCore.QRect(320, 40, 136, 50))
        self.layoutWidget_4.setObjectName("layoutWidget_4")
        self.use_man_muts_formLayout = QtWidgets.QFormLayout(self.layoutWidget_4)
        self.use_man_muts_formLayout.setContentsMargins(0, 0, 0, 0)
        self.use_man_muts_formLayout.setObjectName("use_man_muts_formLayout")
        self.mut_pred_radio = QtWidgets.QRadioButton(self.layoutWidget_4)
        self.mut_pred_radio.setChecked(True)
        self.mut_pred_radio.setObjectName("mut_pred_radio")
        self.mut_pred_radio.toggled.connect(self.use_man_mut_or_use_pred_clicked)
        self.use_man_muts_formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.mut_pred_radio)
        self.manual_mut_radio = QtWidgets.QRadioButton(self.layoutWidget_4)
        self.manual_mut_radio.setObjectName("manual_mut_radio")
        self.manual_mut_radio.toggled.connect(self.use_man_mut_or_use_pred_clicked)
        self.use_man_muts_formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.manual_mut_radio)
        self.use_man_muts_formLayout.setGeometry(QtCore.QRect())

        self.gridLayout_5.addWidget(self.mut_params_groupBox, 1, 0, 1, 1)
        self.parameters_groupBox = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(30)
        sizePolicy.setHeightForWidth(self.parameters_groupBox.sizePolicy().hasHeightForWidth())
        self.parameters_groupBox.setSizePolicy(sizePolicy)
        # p_group_height = 430
        # p_group_width = 320
        # p_group_width = mut_params_group_width
        # p_group_height = mut_params_group_height
        p_group_width = mut_params_group_width
        p_group_height = mut_params_group_height
        self.parameters_groupBox.setMinimumSize(QtCore.QSize(p_group_width, p_group_height))
        self.parameters_groupBox.setMaximumSize(QtCore.QSize(p_group_width, p_group_height))
        self.parameters_groupBox.setGeometry(QtCore.QRect(10, 130, p_group_width, p_group_height))
        # self.parameters_groupBox.setGeometry(QtCore.QRect(mut_params_group_x_pos,mut_params_group_y_pos+mut_params_group_height+10 ,330, 220))
        # self.gridLayout_5.addWidget(self.parameters_groupBox, 1, 1, 1, 1)

        # self.parameters_groupBox.setAlignment(QtCore.Qt.AlignCenter)
        self.parameters_groupBox.setObjectName("parameters_groupBox")
        self.formLayout_gen_params = QtWidgets.QFormLayout(self.parameters_groupBox)
        self.formLayout_gen_params.setObjectName("formLayout_gen_params")

        self.label_save_results = QtWidgets.QLabel(self.parameters_groupBox)
        self.label_save_results.setObjectName("label_save_results")
        self.formLayout_gen_params.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_save_results)
        self.formLayout_save_results = QtWidgets.QFormLayout()
        self.formLayout_save_results.setObjectName("formLayout_save_results")
        self.results_name_text_box = QtWidgets.QLineEdit(self.centralwidget)
        self.results_name_text_box.setObjectName("results_name_text_box")
        self.results_name_text_box.setMinimumSize(QtCore.QSize(large_text_box_width, large_text_box_height))
        self.results_name_text_box.setMaximumSize(QtCore.QSize(large_text_box_width, large_text_box_height))
        self.formLayout_save_results.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.results_name_text_box)
        self.formLayout_gen_params.setLayout(0, QtWidgets.QFormLayout.FieldRole, self.formLayout_save_results)



        self.label_increase_sensitivity = QtWidgets.QLabel(self.parameters_groupBox)
        self.label_increase_sensitivity.setObjectName("label_increase_sensitivity")
        self.formLayout_gen_params.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_increase_sensitivity)
        self.formLayout_incrse_sensitivity = QtWidgets.QFormLayout()
        self.formLayout_incrse_sensitivity.setObjectName("formLayout_incrse_sensitivity")
        self.increase_sensitivity_check_box = QtWidgets.QCheckBox(self.centralwidget)
        self.increase_sensitivity_check_box.setChecked(False)
        self.increase_sensitivity_check_box.setObjectName("increase_sensitivity_check_box")
        self.formLayout_incrse_sensitivity.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.increase_sensitivity_check_box)
        self.formLayout_gen_params.setLayout(1, QtWidgets.QFormLayout.FieldRole, self.formLayout_incrse_sensitivity)

        self.line = QtWidgets.QFrame(self.parameters_groupBox)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.formLayout_gen_params.setWidget(2, QtWidgets.QFormLayout.SpanningRole, self.line)

        self.label_init_params = QtWidgets.QLabel(self.parameters_groupBox)
        self.label_init_params.setObjectName("label_init_params")
        self.formLayout_gen_params.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.label_init_params)
        self.formLayout_init = QtWidgets.QFormLayout()
        self.formLayout_init.setObjectName("formLayout_init")
        self.label_init_srch_dist = QtWidgets.QLabel(self.parameters_groupBox)
        self.label_init_srch_dist.setObjectName("label_init_srch_dist")
        self.formLayout_init.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_init_srch_dist)
        self.init_srch_dist_text_box = QtWidgets.QLineEdit(self.parameters_groupBox)
        self.init_srch_dist_text_box.setObjectName("init_srch_dist_text_box")
        self.init_srch_dist_text_box.setMinimumSize(QtCore.QSize(small_text_box_width, small_text_box_height))
        self.init_srch_dist_text_box.setMaximumSize(QtCore.QSize(small_text_box_width, small_text_box_height))
        self.formLayout_init.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.init_srch_dist_text_box)
        self.add_pos_int_validator(self.init_srch_dist_text_box)
        self.label_final_srch_dist = QtWidgets.QLabel(self.parameters_groupBox)
        self.label_final_srch_dist.setObjectName("label_final_srch_dist")
        self.formLayout_init.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_final_srch_dist)
        self.final_srch_dist_text_box = QtWidgets.QLineEdit(self.parameters_groupBox)
        self.final_srch_dist_text_box.setObjectName("final_srch_dist_text_box")
        self.final_srch_dist_text_box.setMinimumSize(QtCore.QSize(small_text_box_width, small_text_box_height))
        self.final_srch_dist_text_box.setMaximumSize(QtCore.QSize(small_text_box_width, small_text_box_height))
        self.add_pos_int_validator(self.final_srch_dist_text_box)
        self.formLayout_init.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.final_srch_dist_text_box)
        self.label_titer_threshold = QtWidgets.QLabel(self.parameters_groupBox)
        self.label_titer_threshold.setObjectName("label_titer_threshold")
        self.formLayout_init.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_titer_threshold)
        self.titer_threshold_text_box = QtWidgets.QLineEdit(self.parameters_groupBox)
        self.titer_threshold_text_box.setObjectName("titer_threshold_text_box")
        self.titer_threshold_text_box.setMinimumSize(QtCore.QSize(small_text_box_width, small_text_box_height))
        self.titer_threshold_text_box.setMaximumSize(QtCore.QSize(small_text_box_width, small_text_box_height))
        self.add_double_validator_zero_to_one(self.titer_threshold_text_box)
        self.formLayout_init.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.titer_threshold_text_box)
        self.formLayout_gen_params.setLayout(3, QtWidgets.QFormLayout.FieldRole, self.formLayout_init)


        self.line_2 = QtWidgets.QFrame(self.parameters_groupBox)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.formLayout_gen_params.setWidget(4, QtWidgets.QFormLayout.SpanningRole, self.line_2)
        # self.formLayout_splicing = QtWidgets.QFormLayout()
        # self.formLayout_splicing.setSizeConstraint(QtWidgets.QLayout.SetMaximumSize)
        # self.formLayout_splicing.setObjectName("formLayout_splicing")
        # self.label_splicing_params = QtWidgets.QLabel(self.parameters_groupBox)
        # self.label_splicing_params.setObjectName("label_splicing_params")
        # self.formLayout_gen_params.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.label_splicing_params)
        # self.label_splicing_analysis_dist = QtWidgets.QLabel(self.parameters_groupBox)
        # self.label_splicing_analysis_dist.setObjectName("label_splicing_analysis_dist")
        # self.formLayout_splicing.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_splicing_analysis_dist)
        # self.splicing_analysis_dist_text_box = QtWidgets.QLineEdit(self.parameters_groupBox)
        # self.splicing_analysis_dist_text_box.setObjectName("splicing_analysis_dist_text_box")
        # self.splicing_analysis_dist_text_box.setMinimumSize(QtCore.QSize(small_text_box_width, small_text_box_height))
        # self.splicing_analysis_dist_text_box.setMaximumSize(QtCore.QSize(small_text_box_width, small_text_box_height))
        # self.splicing_analysis_dist_text_box.setText('2500')
        # self.add_int_validator(self.splicing_analysis_dist_text_box)
        # self.formLayout_splicing.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.splicing_analysis_dist_text_box)
        # self.formLayout_gen_params.setLayout(4, QtWidgets.QFormLayout.FieldRole, self.formLayout_splicing)

        # self.line_3 = QtWidgets.QFrame(self.parameters_groupBox)
        # self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        # self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        # self.line_3.setObjectName("line_3")
        # self.formLayout_gen_params.setWidget(5, QtWidgets.QFormLayout.SpanningRole, self.line_3)
        self.label_adjacent_genes = QtWidgets.QLabel(self.parameters_groupBox)
        self.label_adjacent_genes.setObjectName("label_adjacent_genes")
        self.formLayout_gen_params.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.label_adjacent_genes)
        self.formLayout_adj_genes = QtWidgets.QFormLayout()
        self.formLayout_adj_genes.setObjectName("formLayout_adj_genes")
        self.label_adj_genes_srch_dist = QtWidgets.QLabel(self.parameters_groupBox)
        self.label_adj_genes_srch_dist.setObjectName("label_adj_genes_srch_dist")
        self.formLayout_adj_genes.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_adj_genes_srch_dist)
        self.adjacent_genes_search_distance_text_box = QtWidgets.QLineEdit(self.parameters_groupBox)
        self.adjacent_genes_search_distance_text_box.setObjectName("adjacent_genes_search_distance_text_box")
        self.adjacent_genes_search_distance_text_box.setMinimumSize(QtCore.QSize(round(small_text_box_width*1.53), small_text_box_height))
        self.adjacent_genes_search_distance_text_box.setMaximumSize(QtCore.QSize(round(small_text_box_width*1.53), small_text_box_height))
        self.adjacent_genes_search_distance_text_box.setEnabled(False)
        self.add_pos_int_validator(self.adjacent_genes_search_distance_text_box)
        self.formLayout_adj_genes.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.adjacent_genes_search_distance_text_box)
        self.formLayout_gen_params.setLayout(5, QtWidgets.QFormLayout.FieldRole, self.formLayout_adj_genes)
        self.gridLayout_5.addWidget(self.parameters_groupBox, 1, 1, 1, 1)
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(100)
        sizePolicy.setVerticalStretch(60)
        sizePolicy.setHeightForWidth(self.groupBox_3.sizePolicy().hasHeightForWidth())
        self.groupBox_3.setSizePolicy(sizePolicy)
        self.groupBox_3.setMinimumSize(QtCore.QSize(930, 260))
        self.groupBox_3.setObjectName("groupBox_3")
        self.groupBox_3.move(1000,0)
        self.gridLayout_4 = QtWidgets.QGridLayout(self.groupBox_3)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.result_text_browser = QtWidgets.QTextBrowser(self.groupBox_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(100)
        sizePolicy.setVerticalStretch(100)
        sizePolicy.setHeightForWidth(self.result_text_browser.sizePolicy().hasHeightForWidth())
        self.result_text_browser.setSizePolicy(sizePolicy)
        self.result_text_browser.setMinimumSize(QtCore.QSize(0, 220))
        self.result_text_browser.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        self.result_text_browser.setObjectName("result_text_browser")
        self.result_text_browser.setFontPointSize(14)
        self.result_text_browser.setText('Welcome to EXPosition!')

        self.gridLayout_4.addWidget(self.result_text_browser, 0, 0, 1, 1)
        self.gridLayout_5.addWidget(self.groupBox_3, 2, 0, 1, 2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 940, 20))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)

        # Actions:
        self.action_Load_configuration = QtWidgets.QAction(MainWindow)
        self.action_Load_configuration.setObjectName("action_Load_configuration")
        self.action_Load_configuration.triggered.connect(self._load_config)
        self.action_Save_configuration = QtWidgets.QAction(MainWindow)
        self.action_Save_configuration.setObjectName("action_Save_configuration")
        self.action_Save_configuration.triggered.connect(self._save_config)
        self.actionAbout_EXPosition = QtWidgets.QAction(MainWindow)
        self.actionAbout_EXPosition.setObjectName("actionAbout_EXPosition")
        self.actionClear_Results = QtWidgets.QAction(MainWindow)
        self.actionClear_Results.setObjectName("actionClear_Results")
        self.actionClear_Results.triggered.connect(self.result_text_browser.clear)
        self.actionCopy_Results = QtWidgets.QAction(MainWindow)
        self.actionCopy_Results.setObjectName("actionCopy_Results")
        self.actionCopy_Results.triggered.connect(self._copy_results)
        self.menuFile.addAction(self.action_Load_configuration)
        self.menuFile.addAction(self.action_Save_configuration)
        self.menuHelp.addAction(self.actionAbout_EXPosition)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.result_text_browser.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        self.result_text_browser.addAction(self.actionClear_Results)
        self.result_text_browser.addAction(self.actionCopy_Results)

        # Buddies: #TODO make sure all labels are buddies with their boxes
        self.label_save_results.setBuddy(self.save_results_csv_check_box)
        self.label_ensembl_id.setBuddy(self.ensmbl_id_text_box)
        self.label_site_start.setBuddy(self.site_start_pos_text_box)
        self.label_SUB_del_start.setBuddy(self.sub_del_start_text_box)
        self.label_INS_pred_nts.setBuddy(self.ins_mut_text_box)
        self.label_SUB_pred_nts.setBuddy(self.sub_ins_mut_text_box)
        self.label_INS_prob.setBuddy(self.ins_prob_text_box)
        self.label_SUB_prob.setBuddy(self.sub_prob_text_box)
        self.label_DEL_del_start.setBuddy(self.del_del_start_text_box)
        self.label_DEL_prob.setBuddy(self.del_prob_text_box)
        self.label_init_srch_dist.setBuddy(self.init_srch_dist_text_box)
        self.label_final_srch_dist.setBuddy(self.final_srch_dist_text_box)
        self.label_titer_threshold.setBuddy(self.titer_threshold_text_box)
        self.label_adj_genes_srch_dist.setBuddy(self.adjacent_genes_search_distance_text_box)

        self.retranslateUi(MainWindow)
        self.init_check_box.toggled['bool'].connect(self.init_srch_dist_text_box.setEnabled)
        self.init_check_box.toggled['bool'].connect(self.final_srch_dist_text_box.setEnabled)
        self.init_check_box.toggled['bool'].connect(self.titer_threshold_text_box.setEnabled)
        self.adj_genes_info_check_box.toggled['bool'].connect(self.adjacent_genes_search_distance_text_box.setEnabled)
        self.save_results_csv_check_box.toggled['bool'].connect(self.results_name_text_box.setEnabled)
        self.manual_mut_radio.toggled['bool'].connect(self.sub_prob_text_box.setEnabled)
        self.manual_mut_radio.toggled['bool'].connect(self.del_prob_text_box.setEnabled)
        self.manual_mut_radio.toggled['bool'].connect(self.ins_prob_text_box.setEnabled)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.init_check_box, self.transcription_check_box)
        MainWindow.setTabOrder(self.transcription_check_box, self.adj_genes_info_check_box)
        MainWindow.setTabOrder(self.adj_genes_info_check_box, self.splicing_check_box)
        MainWindow.setTabOrder(self.splicing_check_box, self.gene_symbol_text_box)
        MainWindow.setTabOrder(self.gene_symbol_text_box, self.ensmbl_id_text_box)
        MainWindow.setTabOrder(self.ensmbl_id_text_box, self.site_start_pos_text_box)
        MainWindow.setTabOrder(self.site_start_pos_text_box, self.site_strand_text_box)
        MainWindow.setTabOrder(self.site_strand_text_box, self.site_chr_text_box)
        MainWindow.setTabOrder(self.site_chr_text_box, self.analyze_button)
        MainWindow.setTabOrder(self.analyze_button, self.mut_pred_radio)
        MainWindow.setTabOrder(self.mut_pred_radio, self.manual_mut_radio)
        MainWindow.setTabOrder(self.manual_mut_radio, self.ins_prob_text_box)
        MainWindow.setTabOrder(self.ins_prob_text_box, self.ins_mut_text_box)
        MainWindow.setTabOrder(self.ins_mut_text_box, self.del_prob_text_box)
        MainWindow.setTabOrder(self.del_prob_text_box, self.del_del_start_text_box)
        MainWindow.setTabOrder(self.del_del_start_text_box, self.del_del_nts_text_box)
        MainWindow.setTabOrder(self.del_del_nts_text_box, self.sub_prob_text_box)
        MainWindow.setTabOrder(self.sub_prob_text_box, self.sub_del_start_text_box)
        MainWindow.setTabOrder(self.sub_del_start_text_box, self.sub_del_nts_text_box)
        MainWindow.setTabOrder(self.sub_del_nts_text_box, self.sub_ins_mut_text_box)
        MainWindow.setTabOrder(self.sub_ins_mut_text_box, self.save_results_csv_check_box)
        MainWindow.setTabOrder(self.save_results_csv_check_box, self.init_srch_dist_text_box)
        MainWindow.setTabOrder(self.init_srch_dist_text_box, self.final_srch_dist_text_box)
        MainWindow.setTabOrder(self.final_srch_dist_text_box, self.titer_threshold_text_box)
        MainWindow.setTabOrder(self.titer_threshold_text_box, self.adjacent_genes_search_distance_text_box)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "EXPosition"))
        self.init_check_box.setText(_translate("MainWindow", "Initiation"))
        self.adj_genes_info_check_box.setText(_translate("MainWindow", "Adjacent Genes Info"))
        self.save_results_csv_check_box.setText(_translate("MainWindow", "Save Results"))
        self.results_name_text_box.setText(_translate("MainWindow", "Analysis " + str(datetime.datetime.now())[:-7]))
        self.transcription_check_box.setText(_translate("MainWindow", "Transcription"))
        self.splicing_check_box.setText(_translate("MainWindow", "Splicing"))
        self.label_ensembl_id.setText(_translate("MainWindow", "Ensembl ID"))
        self.label_target_seq.setText(_translate("MainWindow", "Site Sequence"))
        self.label_site_start.setText(_translate("MainWindow", "Site Start Position"))
        self.label_gene_symbol.setText(_translate("MainWindow", "Gene Symbol"))
        self.label_site_strand.setText(_translate("MainWindow", "Site Strand"))
        self.label_site_chr.setText(_translate("MainWindow", "Site Chr."))
        self.ensmbl_id_text_box.setText(_translate("MainWindow", "No Interest Transcript"))
        self.gene_symbol_text_box.setText(_translate("MainWindow", "No Interest Gene"))
        self.site_start_pos_text_box.setText(_translate("MainWindow", ""))
        self.analyze_button.setText(_translate("MainWindow", "Analyze"))
        self.N_muts_text_box.setText(_translate("MainWindow", "4"))
        self.ins_prob_text_box.setText(_translate("MainWindow", ""))
        self.del_prob_text_box.setText(_translate("MainWindow", ""))
        self.sub_prob_text_box.setText(_translate("MainWindow", ""))
        self.analyze_button.setShortcut(_translate("MainWindow", "Ctrl+Return"))
        self.mut_params_groupBox.setTitle(_translate("MainWindow", "Mutation Parameters ('+' strand)"))
        self.label_SUB.setText(_translate("MainWindow", "SUB"))
        self.label_SUB_del_start.setText(_translate("MainWindow", "Del Start"))
        self.label_DEL_del_nts.setText(_translate("MainWindow", "Del NTs"))
        self.label_SUB_del_nts.setText(_translate("MainWindow", "Del NTs"))
        self.label_INS.setText(_translate("MainWindow", "INS"))
        self.label_INS_ins_pos.setText(_translate("MainWindow", "Ins. Pos"))
        self.label_INS_pred_nts.setText(_translate("MainWindow", "Inserted NTs"))
        self.label_SUB_pred_nts.setText(_translate("MainWindow", "Inserted NTs"))
        self.label_N_muts.setText(_translate("MainWindow", "N Muts."))
        self.label_INS_prob.setText(_translate("MainWindow", "Prob."))
        self.label_SUB_prob.setText(_translate("MainWindow", "Prob."))
        self.label_DEL_del_start.setText(_translate("MainWindow", "Del Start"))
        self.label_DEL.setText(_translate("MainWindow", "DEL"))
        self.label_DEL_prob.setText(_translate("MainWindow", "Prob."))
        self.mut_pred_radio.setText(_translate("MainWindow", "Predict Muts"))
        self.manual_mut_radio.setText(_translate("MainWindow", "Manual Muts"))
        self.parameters_groupBox.setTitle(_translate("MainWindow", "General Parameters"))
        self.label_init_params.setText(_translate("MainWindow", "Initiation:"))
        # self.label_splicing_params.setText(_translate("MainWindow", "Splicing:"))
        # self.label_splicing_analysis_dist.setText(_translate("MainWindow", "Splicing Window Check"))
        self.label_save_results.setText(_translate("MainWindow", "Results Name:"))
        self.label_increase_sensitivity.setText(_translate("MainWindow", "Increase Sensitivity:"))
        self.label_init_srch_dist.setText(_translate("MainWindow", "Initial Search Distance"))
        self.label_final_srch_dist.setText(_translate("MainWindow", "Final Search Distance"))
        self.label_titer_threshold.setText(_translate("MainWindow", "TITER Threshold"))
        self.init_srch_dist_text_box.setText(_translate("MainWindow", "10"))
        self.final_srch_dist_text_box.setText(_translate("MainWindow", "400"))
        self.titer_threshold_text_box.setText(_translate("MainWindow", "0.05"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Results:"))
        self.label_adjacent_genes.setText(_translate("MainWindow", " Adjacent\nGenes Info:"))
        self.label_adj_genes_srch_dist.setText(_translate("MainWindow", "Search Distance  "))
        self.adjacent_genes_search_distance_text_box.setText(_translate("MainWindow", "70000"))
        self.menuFile.setTitle(_translate("MainWindow", "&File"))
        self.menuHelp.setTitle(_translate("MainWindow", "&Help"))
        self.action_Load_configuration.setText(_translate("MainWindow", "&Load configuration"))
        self.action_Load_configuration.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.action_Save_configuration.setText(_translate("MainWindow", "&Save configuration"))
        self.action_Save_configuration.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionAbout_EXPosition.setText(_translate("MainWindow", "About EXPosition"))
        self.actionClear_Results.setText(_translate("MainWindow", "Clear Results"))
        self.actionClear_Results.setShortcut(_translate("MainWindow", "Ctrl+L"))
        self.actionCopy_Results.setText(_translate("MainWindow", "Copy Results"))
        self.actionCopy_Results.setShortcut(_translate("MainWindow", "Ctrl+Shift+C"))

    def _update_mut_params(self, exp_mut_dict):
        if np.all(exp_mut_dict['INS_prob']==[1.0]):
            self.ins_prob_text_box.setText("1")
        else:
            try:
                self.ins_prob_text_box.setText('/'.join([f'{x:.3f}' for x in exp_mut_dict['INS_prob']]))
            except:
                b1=1

        if np.all(exp_mut_dict['DEL_prob']==[1.0]):
            self.del_prob_text_box.setText("1")
        else:
            self.del_prob_text_box.setText('/'.join([f'{x:.3f}' for x in exp_mut_dict['DEL_prob']]))

        if np.all(exp_mut_dict['SUB_prob']==[1.0]):
            self.sub_prob_text_box.setText("1")
        else:
            self.sub_prob_text_box.setText('/'.join([f'{x:.3f}' for x in exp_mut_dict['SUB_prob']]))

        if np.all(exp_mut_dict['INS_prob'] == [0.0]):
            self.ins_mut_text_box.setText('-')
        else:
            self.ins_mut_text_box.setText('/'.join(exp_mut_dict['INS_ins_mut']))


        if np.all(exp_mut_dict['DEL_prob'] == [0.0]):
            self.del_del_start_text_box.setText('-')
            self.del_del_nts_text_box.setText('-')
        else:
            self.del_del_start_text_box.setText('/'.join([str(x) for x in exp_mut_dict['DEL_del_start']]))
            self.del_del_nts_text_box.setText('/'.join(exp_mut_dict['DEL_del_nts']))

        if np.all(exp_mut_dict['SUB_prob'] == [0.0]):
            self.sub_del_start_text_box.setText('-')
            self.sub_del_nts_text_box.setText('-')
            self.sub_ins_mut_text_box.setText('-')
        else:
            self.sub_del_start_text_box.setText('/'.join([str(x) for x in exp_mut_dict['SUB_del_start']]))
            self.sub_del_nts_text_box.setText('/'.join(exp_mut_dict['SUB_del_nts']))
            self.sub_ins_mut_text_box.setText('/'.join(exp_mut_dict['SUB_del_nts']))



    def _analyze(self, configs):
        # Create QThread and an AnalysisWorker object
        self.thread = QtCore.QThread()
        self.worker = AnalysisWorker()
        
        # Move the AnalysisWorker to the thread
        self.worker.moveToThread(self.thread)
        # Start signal
        self.thread.started.connect(functools.partial(self.worker.run, configs, self.save_results_csv_check_box.isChecked()))
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)

        # Output slots
        self.worker.output_text.connect(lambda text: self.result_text_browser.append(text))
        self.worker.mut_params_update.connect(lambda exp_mut_dict: self._update_mut_params(exp_mut_dict))

        # Start the thread
        self.thread.start()

        # Final resets
        # TODO: Need to add a animation to the status bar when a calc is happening
        #       https://stackoverflow.com/questions/58799257/spinning-animation-while-another-process-is-running-in-pyqt
        self._show_status_bar_message('Analyzing...')
        self.analyze_button.setEnabled(False)
        self.thread.finished.connect(
            lambda: self.analyze_button.setEnabled(True)
        )
        self.thread.finished.connect(
            lambda: self._flash_status_bar_message('Analyzing... complete')
        )
        self.thread.finished.connect(
            lambda: self.results_name_text_box.setText("Analysis " + str(datetime.datetime.now())[:-7])
        )

    @staticmethod
    def _str_to_float(s):
        if s:
            return float(s)
        return 0.0


    # @staticmethod
    # def are_curr_mut_textboxes_valid(prob,use_man_muts):
    #     if not use_man_muts:
    #         return True
    #     return len(prob) != 0 and (float(prob) == 0)
    @staticmethod
    def _str_to_int(s):
        if s:
            return int(s)
        return 0

    def _get_current_gui_config(self):
        config_dict = {'gene_symbol': self.gene_symbol_text_box.text(),
                       'ensembl_id': self.ensmbl_id_text_box.text(),
                       'target_seq': self.target_seq_text_box.text(),
                       'site_start_pos': self.site_start_pos_text_box.text(),
                       'site_strand': self.site_strand_text_box.text(),
                       'site_chr': self.site_chr_text_box.text(),
                       'N_muts': self.N_muts_text_box.text(),
                       'do_transcription': ['1' if self.transcription_check_box.isChecked() else '0'][0],
                       'do_splicing': ['1' if self.splicing_check_box.isChecked() else '0'][0],
                       'do_initiation': ['1' if self.init_check_box.isChecked() else '0'][0],
                       'INS_prob': self.ins_prob_text_box.text(),
                       'INS_ins_mut': self.ins_mut_text_box.text(),
                       'INS_ins_pos': self.ins_pos_text_box.text(),
                       'DEL_prob': self.del_prob_text_box.text(),
                       'DEL_del_start': self.del_del_start_text_box.text(),
                       'DEL_del_nts': self.del_del_nts_text_box.text(),
                       'SUB_prob': self.sub_prob_text_box.text(),
                       'SUB_ins_mut': self.sub_ins_mut_text_box.text(),
                       'SUB_del_start': self.sub_del_start_text_box.text(),
                       'SUB_del_nts': self.sub_del_nts_text_box.text(),
                       'use_mut_predictor':['1' if self.mut_pred_radio.isChecked() else '0'][0],
                       'increased_sensitivity': ['1' if self.increase_sensitivity_check_box.isChecked() else '0'][0],
                       'init_search_dist': self.init_srch_dist_text_box.text(),
                       'final_search_dist': self.final_srch_dist_text_box.text(),
                       'titer_threshold': self.titer_threshold_text_box.text(),
                       'adjacent_srch_dist': self.adjacent_genes_search_distance_text_box.text(),
                       'do_adj_srch': '1' if self.adj_genes_info_check_box.isChecked() else '0'
                       }
        # if self.manual_mut_radio.isChecked():
            # INS_probs = [float(config_dict['INS_prob']) if config_dict['INS_prob']!='' else 0.0][0]
            # DEL_probs = [float(config_dict['DEL_prob']) if config_dict['DEL_prob']!='' else 0.0][0]
            # SUB_probs = [float(config_dict['SUB_prob']) if config_dict['SUB_prob']!='' else 0.0][0]
            # if np.any(DEL_probs>0):
            #     config_dict['DEL_del_start'] = int(config_dict['DEL_del_start'])
            # else:
            #     config_dict['DEL_del_start'] = ''
            #     config_dict['DEL_del_nts'] = ''
            # if config_dict['SUB_prob']>0:
            #     config_dict['SUB_del_start'] = int(config_dict['SUB_del_start'])
            # else:
            #     config_dict['SUB_del_start'] = ''
            #     config_dict['SUB_del_nts'] = ''
            #     config_dict['SUB_ins_mut'] = ''

        if config_dict['do_initiation']=='1' and config_dict['do_splicing']=='1':
            if config_dict['init_search_dist']!='':
                config_dict['init_search_dist'] = config_dict['init_search_dist']
            if config_dict['final_search_dist']!='':
                config_dict['final_search_dist'] = config_dict['final_search_dist']
            if config_dict['titer_threshold']!='':
                config_dict['titer_threshold'] = config_dict['titer_threshold']
        else:
            config_dict['init_search_dist'] = ''
            config_dict['final_search_dist'] = ''
            config_dict['titer_threshold'] = ''
        config_df = pd.DataFrame(config_dict, index=[0])
        config_df.name = self.results_name_text_box.text()
        config_df.save_results = ['1' if self.save_results_csv_check_box.isChecked() else '0'][0]
        return config_df
    def _load_config(self):
        config_file_path, _ = QtWidgets.QFileDialog.getOpenFileName(self, caption="Load Configuration", filter="*.csv")
        if not config_file_path:
            return
        try:
            configs = pd.read_csv(config_file_path,dtype='str')
        except IOError:
            self._flash_status_bar_message(f'Could not load configuration file \'{config_file_path}\'')
            return
        except Exception:
            type, val, _ = sys.exc_info()
            self._flash_status_bar_message(f'Unexpected error occurred while loading configuration file: \'{val}\' ({type})')
            return
        configs.name = config_file_path.split('/')[-1]
        configs.save_results='1'
        self.results_name_text_box.setText(configs.name)
        self._analyze(configs)

    def _save_config(self):
        curr_config = self._get_current_gui_config()
        config_file_path, _ = QtWidgets.QFileDialog.getSaveFileName(self, caption="Save Configuration", filter="*.csv")
        if not config_file_path:
            return
        try:
            curr_config.to_csv(config_file_path,index=False)
        except IOError:
            self._flash_status_bar_message(f'Could not write configuration file to \'{config_file_path}\'')
            return
        except Exception:
            type, val, _ = sys.exc_info()
            self._flash_status_bar_message(f'Unexpected error occurred while writing configuration file: \'{val}\' ({type})')
            return
        self._flash_status_bar_message(f'Configuration saved to \'{config_file_path}\'')

    def _copy_results(self):
        plain_text = self.result_text_browser.toPlainText()
        plain_text = re.sub(r'(Target Seq is: [ATGC]{16})([ATGC])([ATGC]{5})', r'\1*\2*\3', plain_text)
        QtWidgets.QApplication.clipboard().setText(plain_text)
        self._flash_status_bar_message('Results copied to clipboard')

if __name__ == "__main__":

    # # # no GUI script
    # # # C:\Users\shaic\Desktop\Biomedical engineering masters\research project\Analysis Exposition\Optimized sgRNA article\Avana6A375\classify\12_2_23\all_classify_sites_14_2_23_filled.csv")
    # # # sites = sites.loc[[i for i in sites.index if len(sites.loc[i, 'target_seq']) == 23], :]
    # # # clinvar_sites = pd.read_pickle(r"C:\Users\shaic\Downloads\clinvar_all_sites.pkl")
    # # # sites=sites.iloc[15:18]
    # # # sites = pd.read_pickle(
    # # #     r"C:\Users\shaic\Desktop\Biomedical engineering masters\research project\Analysis Exposition\clinvar analysis\nico_sites_filled.pickle")
    # # # sites = sites[sites['comment'] == 'Success!']
    # sites = pd.read_csv(r"C:\Users\shaic\Desktop\Biomedical engineering masters\For Yoram\QIMR_results\QIMR_filled_success.csv")
    # # sites = pd.read_pickle(r"C:\Users\shaic\Desktop\Biomedical engineering masters\For Yoram\QIMR_data_processed.pkl")
    # # # sites['site_chr'] = sites['mut_ids'].apply(lambda x: 'chr' + x.split(':')[1])
    # sites.loc[sites.Transcript_ID.isnull(), 'Transcript_ID'] = 'No Interest Transcript'
    # sites['comment'] = ''
    # sites['site_chr'] = sites['Chromosome']
    # sites['ensembl_id'] = sites['Transcript_ID']
    # sites['DEL_prob'] = ''
    # sites['INS_prob'] = ''
    # sites['SUB_prob'] = ''
    # sites['INS_ins_mut'] = '-'
    # sites['INS_ins_pos'] = '-'
    # sites['DEL_del_start'] = '-'
    # sites['DEL_del_nts'] = '-'
    # sites['SUB_ins_mut'] = '-'
    # sites['SUB_del_start'] = '-'
    # sites['SUB_del_nts'] = '-'
    # # sites=sites.iloc[66:68]
    # # int_idxs = [24641, 52191, 53440, 69770, 92130, 106140, 126030, 136621, 166489, 181504, 182363, 185427]
    # # sites = pd.read_csv(r"C:\Users\shaic\Desktop\Biomedical engineering masters\For Yoram\QIMR_results\QIMR_filled_success.csv")
    # # sites = sites[(sites.trans_init_score>0)]
    # # sites = sites[sites['mut_id']=='HAS1:chr19:51723931:C:A:C']
    # # sites = sites[sites.Variant_Classification=='Translation_Start_Site']
    # sites = sites[(sites.mut_id=='AP000783.1:chr11:123430785:C:C:T') |
    #               (sites.mut_id=='TCF7:chr5:134115881:G:A:G') |
    #               (sites.mut_id=='PRSS58:chr7:142257737:G:G:T')]
    # for i in sites.index:
    #     ref = sites.loc[i,'Reference_Allele']
    #     tum1 = sites.loc[i, 'Tumor_Seq_Allele1']
    #     tum2 = sites.loc[i, 'Tumor_Seq_Allele2']
    #     pos = sites.loc[i,'Start_Position']
    #     if ref==tum1:
    #         mut = tum2
    #     elif ref==tum2:
    #         mut = tum1
    #     else:
    #         print(f'something is wrong {i}')
    #         sites.loc[i,'comment'] = 'both tum1 and tum2 differ from ref'
    #     mut_type = sites.loc[i,'Variant_Type']
    #     if ref!='-' and mut=='-' and mut_type=='DEL': #DEL
    #         sites.loc[i,'DEL_prob'] = '1'
    #         sites.loc[i,'INS_prob'] = '0'
    #         sites.loc[i,'SUB_prob'] = '0'
    #         sites.loc[i, 'DEL_del_start'] = str(pos)
    #         sites.loc[i, 'DEL_del_nts'] = ref
    #     elif ref=='-' and mut!='-' and mut_type=='INS': #INS
    #         sites.loc[i, 'DEL_prob'] = '0'
    #         sites.loc[i,'INS_prob'] = '1'
    #         sites.loc[i,'SUB_prob'] = '0'
    #         sites.loc[i, 'INS_ins_pos'] = str(pos)
    #         sites.loc[i, 'INS_ins_mut'] = mut
    #     elif mut!='-' and mut_type in ['SNP','DNP','TNP']: #SUB
    #         sites.loc[i, 'DEL_prob'] = '0'
    #         sites.loc[i, 'INS_prob'] = '0'
    #         sites.loc[i, 'SUB_prob'] = '1'
    #         sites.loc[i, 'SUB_ins_mut'] = mut
    #         sites.loc[i, 'SUB_del_start'] = str(pos)
    #         sites.loc[i, 'SUB_del_nts'] = ref
    #     else:
    #         print(f'something is wrong {i}')
    #         sites.loc[i,'comment'] = 'mutation type was not identified'
    #
    # sites['affects_transcription'] = 0
    # sites['use_mut_predictor'] = '0'
    # sites['use_man_muts'] = '1'
    # sites['do_transcription'] = '0'
    # sites['do_splicing'] = '0'
    # sites['do_initiation'] = '1'
    # from time import time
    # t0 = time()
    # AnalysisWorker().run(input_configs=sites,save_results=True,run_on_GUI=0)
    # print(time()-t0)
    # q=1

    # # # POWER script
    # import os
    # print(os.environ["CONDA_PREFIX"])
    # import pandas as pd
    # from Oncosplice.general.file_handling import *
    # import shutil
    # from time import time
    # #import pandas as pd
    # a=time()
    # prs, _ = parse_in_args()
    # args_data = unload_pickle(prs.args_file)
    # out_dir = args_data['results_path']
    # job_num = int(args_data['sh_file'].split('_')[-1].strip('.sh'))
    # print('Job Number: {}'.format(job_num))
    # sites = args_data['mut_data']
    # sites.name = f'site_{min(sites.index)}_{max(sites.index)}'
    # AnalysisWorker().run(input_configs=sites,save_results=True,run_on_GUI=0)
    # sh_file = args_data['sh_file']
    # pkl_file = args_data['pkl_file']
    # done_path = os.path.join(os.path.dirname(sh_file), 'done')
    # shutil.move(pkl_file, os.path.join(done_path, os.path.basename(pkl_file)))
    # shutil.move(sh_file, os.path.join(done_path, os.path.basename(sh_file)))
    # print(time() -a)
    # print("Done.")

    ## GUI

    ## DPI attempts
    ## from screeninfo import get_monitors
    ## import screeninfo
    ## for monitor in get_monitors():
    ##     width = monitor.width
    ##     height = monitor.height
    ##     monitor.is_primary
    ##     print(str(width) + 'x' + str(height))
    ## b=1

    # # GUI
    # import sys
    # os.environ["QT_ENABLE_HIGHDPI_SCALING"] = "1"
    app = QtWidgets.QApplication(sys.argv)
    # app.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)
    w = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(w)
    w.show()
    sys.exit(app.exec_())

    # sites = pd.read_csv(r"C:\Users\shaic\PycharmProjects\GitHub\EXPosition\code\man_muts_example.csv",dtype=str)
    # AnalysisWorker().run(input_configs=sites, save_results=True, run_on_GUI=0)

    # AnalysisWorker().run(input_configs=sites, save_results=True, run_on_GUI=0)
    # q=1


# import sys
# from PyQt5.QtWidgets import QApplication
#
# app = QApplication(sys.argv)
# abc = app.primaryScreen()
# screen = app.screens()[0]
# dpi = screen.physicalDotsPerInch()
# app.quit()
